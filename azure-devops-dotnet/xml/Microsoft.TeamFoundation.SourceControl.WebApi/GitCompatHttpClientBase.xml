<Type Name="GitCompatHttpClientBase" FullName="Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase">
  <TypeSignature Language="C#" Value="public class GitCompatHttpClientBase : Microsoft.VisualStudio.Services.WebApi.VssHttpClientBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GitCompatHttpClientBase extends Microsoft.VisualStudio.Services.WebApi.VssHttpClientBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" />
  <TypeSignature Language="VB.NET" Value="Public Class GitCompatHttpClientBase&#xA;Inherits VssHttpClientBase" />
  <TypeSignature Language="F#" Value="type GitCompatHttpClientBase = class&#xA;    inherit VssHttpClientBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
    <AssemblyVersion>16.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualStudio.Services.WebApi.VssHttpClientBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This class contains overloads of methods that were removed from the auto-generated client
            due to adding parameters. We use extra overloads to ensure that whatever binary signature
            a client used before will map to one of these prototypes.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitCompatHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase (baseUrl, credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitCompatHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials, Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials, class Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials, settings As VssHttpRequestSettings)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials * Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase (baseUrl, credentials, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
        <Parameter Name="settings" Type="Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings" />
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <param name="settings">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitCompatHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase (baseUrl, credentials, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <param name="handlers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitCompatHttpClientBase (Uri baseUrl, System.Net.Http.HttpMessageHandler pipeline, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class System.Net.Http.HttpMessageHandler pipeline, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.#ctor(System.Uri,System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, pipeline As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase : Uri * System.Net.Http.HttpMessageHandler * bool -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase (baseUrl, pipeline, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="pipeline" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="pipeline">To be added.</param>
        <param name="disposeHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitCompatHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials, Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials, class Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials, settings As VssHttpRequestSettings, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials * Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase (baseUrl, credentials, settings, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
        <Parameter Name="settings" Type="Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <param name="settings">To be added.</param>
        <param name="handlers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, Guid repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePullRequestAsync (gitPullRequestToCreate As GitPullRequest, repositoryId As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitPullRequest)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitCompatHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate" />
        <param name="repositoryId" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePullRequestAsync (gitPullRequestToCreate As GitPullRequest, repositoryId As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitPullRequest)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitCompatHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate" />
        <param name="repositoryId" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, Guid project, Guid repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePullRequestAsync (gitPullRequestToCreate As GitPullRequest, project As Guid, repositoryId As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitPullRequest)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitCompatHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate" />
        <param name="project">Project ID</param>
        <param name="repositoryId" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, Guid project, string repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePullRequestAsync (gitPullRequestToCreate As GitPullRequest, project As Guid, repositoryId As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitPullRequest)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitCompatHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate" />
        <param name="project">Project ID</param>
        <param name="repositoryId" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, Guid repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePullRequestAsync (gitPullRequestToCreate As GitPullRequest, project As String, repositoryId As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitPullRequest)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitCompatHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate" />
        <param name="project">Project ID or project name</param>
        <param name="repositoryId" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, string repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePullRequestAsync (gitPullRequestToCreate As GitPullRequest, project As String, repositoryId As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitPullRequest)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitCompatHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate" />
        <param name="project">Project ID or project name</param>
        <param name="repositoryId" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository gitRepositoryToCreate, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository gitRepositoryToCreate, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRepositoryAsync (gitRepositoryToCreate As GitRepository, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.CreateRepositoryAsync (gitRepositoryToCreate, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitRepositoryToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitRepositoryToCreate" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git repository
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository gitRepositoryToCreate, Guid project, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository gitRepositoryToCreate, valuetype System.Guid project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRepositoryAsync (gitRepositoryToCreate As GitRepository, project As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.CreateRepositoryAsync (gitRepositoryToCreate, project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitRepositoryToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitRepositoryToCreate" />
        <param name="project">Project ID</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git repository
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository gitRepositoryToCreate, string project, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository gitRepositoryToCreate, string project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.CreateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRepositoryAsync (gitRepositoryToCreate As GitRepository, project As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.CreateRepositoryAsync (gitRepositoryToCreate, project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitRepositoryToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitRepositoryToCreate" />
        <param name="project">Project ID or project name</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git repository
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobAsync (repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitBlobRef)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitCompatHttpClientBase.GetBlobAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobAsync (repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitBlobRef)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitCompatHttpClientBase.GetBlobAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid project, Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobAsync (project As Guid, repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitBlobRef)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitCompatHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid project, string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobAsync (project As Guid, repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitBlobRef)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitCompatHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string project, Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobAsync (project As String, repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitBlobRef)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitCompatHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string project, string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobAsync (project As String, repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitBlobRef)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitCompatHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobContentAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobContentAsync (repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobContentAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobContentAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobContentAsync (repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobContentAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid project, Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobContentAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobContentAsync (project As Guid, repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid project, string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobContentAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobContentAsync (project As Guid, repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string project, Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobContentAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobContentAsync (project As String, repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string project, string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobContentAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobContentAsync (project As String, repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobZipAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobZipAsync (repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobZipAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobZipAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobZipAsync (repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobZipAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid project, Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobZipAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobZipAsync (project As Guid, repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid project, string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobZipAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobZipAsync (project As Guid, repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string project, Guid repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobZipAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobZipAsync (project As String, repositoryId As Guid, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string project, string repositoryId, string sha1, bool? download = default, string fileName = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetBlobZipAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobZipAsync (project As String, repositoryId As String, sha1 As String, Optional download As Nullable(Of Boolean) = Nothing, Optional fileName As String = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="sha1" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="fileName" Type="System.String" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitItem)" />
      <MemberSignature Language="F#" Value="abstract member GetItemAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&#xA;override this.GetItemAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitCompatHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemContentAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemContentAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemContentAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemTextAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemTextAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemTextAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-devops-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), Optional versionDescriptor As GitVersionDescriptor = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" FrameworkAlternate="azure-devops-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-devops-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" FrameworkAlternate="azure-devops-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As Guid, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As Guid, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, Guid repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As String, repositoryId As Guid, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, string repositoryId, string path, string scopePath, Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType? recursionLevel, bool? includeContentMetadata, bool? latestProcessedChange, bool? download, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, bool? includeContent, object userState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemZipAsync (project As String, repositoryId As String, path As String, scopePath As String, recursionLevel As Nullable(Of VersionControlRecursionType), includeContentMetadata As Nullable(Of Boolean), latestProcessedChange As Nullable(Of Boolean), download As Nullable(Of Boolean), versionDescriptor As GitVersionDescriptor, includeContent As Nullable(Of Boolean), userState As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetItemZipAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetItemZipAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitCompatHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="path" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="scopePath" Type="System.String" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" Index="8" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" Index="9" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="10" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="11" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (Guid repositoryId, int pullRequestId, int? skip = default, int? top = default, bool? includeObsolete = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestConflictsAsync(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestConflictsAsync (repositoryId As Guid, pullRequestId As Integer, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional includeObsolete As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitConflict))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;&#xA;override this.GetPullRequestConflictsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestConflictsAsync (repositoryId, pullRequestId, skip, top, includeObsolete, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">To be added.</param>
        <param name="pullRequestId">To be added.</param>
        <param name="skip">To be added.</param>
        <param name="top">To be added.</param>
        <param name="includeObsolete">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (string repositoryId, int pullRequestId, int? skip = default, int? top = default, bool? includeObsolete = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestConflictsAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestConflictsAsync (repositoryId As String, pullRequestId As Integer, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional includeObsolete As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitConflict))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;&#xA;override this.GetPullRequestConflictsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestConflictsAsync (repositoryId, pullRequestId, skip, top, includeObsolete, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">To be added.</param>
        <param name="pullRequestId">To be added.</param>
        <param name="skip">To be added.</param>
        <param name="top">To be added.</param>
        <param name="includeObsolete">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (Guid project, Guid repositoryId, int pullRequestId, int? skip = default, int? top = default, bool? includeObsolete = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestConflictsAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestConflictsAsync (project As Guid, repositoryId As Guid, pullRequestId As Integer, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional includeObsolete As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitConflict))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;&#xA;override this.GetPullRequestConflictsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">To be added.</param>
        <param name="repositoryId">To be added.</param>
        <param name="pullRequestId">To be added.</param>
        <param name="skip">To be added.</param>
        <param name="top">To be added.</param>
        <param name="includeObsolete">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (Guid project, string repositoryId, int pullRequestId, int? skip = default, int? top = default, bool? includeObsolete = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestConflictsAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestConflictsAsync (project As Guid, repositoryId As String, pullRequestId As Integer, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional includeObsolete As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitConflict))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;&#xA;override this.GetPullRequestConflictsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">To be added.</param>
        <param name="repositoryId">To be added.</param>
        <param name="pullRequestId">To be added.</param>
        <param name="skip">To be added.</param>
        <param name="top">To be added.</param>
        <param name="includeObsolete">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (string project, Guid repositoryId, int pullRequestId, int? skip = default, int? top = default, bool? includeObsolete = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestConflictsAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestConflictsAsync (project As String, repositoryId As Guid, pullRequestId As Integer, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional includeObsolete As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitConflict))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;&#xA;override this.GetPullRequestConflictsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">To be added.</param>
        <param name="repositoryId">To be added.</param>
        <param name="pullRequestId">To be added.</param>
        <param name="skip">To be added.</param>
        <param name="top">To be added.</param>
        <param name="includeObsolete">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (string project, string repositoryId, int pullRequestId, int? skip = default, int? top = default, bool? includeObsolete = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(string project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestConflictsAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestConflictsAsync (project As String, repositoryId As String, pullRequestId As Integer, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional includeObsolete As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitConflict))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;&#xA;override this.GetPullRequestConflictsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">To be added.</param>
        <param name="repositoryId">To be added.</param>
        <param name="pullRequestId">To be added.</param>
        <param name="skip">To be added.</param>
        <param name="top">To be added.</param>
        <param name="includeObsolete">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync (Guid repositoryId, int pullRequestId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestWorkItemsAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestWorkItemsAsync (repositoryId As Guid, pullRequestId As Integer, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of AssociatedWorkItem))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;&#xA;override this.GetPullRequestWorkItemsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestWorkItemsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync (string repositoryId, int pullRequestId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestWorkItemsAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestWorkItemsAsync (repositoryId As String, pullRequestId As Integer, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of AssociatedWorkItem))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;&#xA;override this.GetPullRequestWorkItemsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestWorkItemsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestWorkItemsAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestWorkItemsAsync (project As Guid, repositoryId As Guid, pullRequestId As Integer, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of AssociatedWorkItem))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;&#xA;override this.GetPullRequestWorkItemsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestWorkItemsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync (Guid project, string repositoryId, int pullRequestId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestWorkItemsAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestWorkItemsAsync (project As Guid, repositoryId As String, pullRequestId As Integer, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of AssociatedWorkItem))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;&#xA;override this.GetPullRequestWorkItemsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestWorkItemsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync (string project, Guid repositoryId, int pullRequestId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestWorkItemsAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestWorkItemsAsync (project As String, repositoryId As Guid, pullRequestId As Integer, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of AssociatedWorkItem))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;&#xA;override this.GetPullRequestWorkItemsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestWorkItemsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync (string project, string repositoryId, int pullRequestId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt; GetPullRequestWorkItemsAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetPullRequestWorkItemsAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPullRequestWorkItemsAsync (project As String, repositoryId As String, pullRequestId As Integer, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of AssociatedWorkItem))" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;&#xA;override this.GetPullRequestWorkItemsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;" Usage="gitCompatHttpClientBase.GetPullRequestWorkItemsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid repositoryId, string filter = default, bool? includeLinks = default, bool? latestStatusesOnly = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRefsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRefsAsync (repositoryId As Guid, Optional filter As String = Nothing, Optional includeLinks As Nullable(Of Boolean) = Nothing, Optional latestStatusesOnly As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRef))" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitCompatHttpClientBase.GetRefsAsync (repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="filter" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string repositoryId, string filter = default, bool? includeLinks = default, bool? latestStatusesOnly = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRefsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRefsAsync (repositoryId As String, Optional filter As String = Nothing, Optional includeLinks As Nullable(Of Boolean) = Nothing, Optional latestStatusesOnly As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRef))" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitCompatHttpClientBase.GetRefsAsync (repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="filter" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid project, Guid repositoryId, string filter = default, bool? includeLinks = default, bool? latestStatusesOnly = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRefsAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRefsAsync (project As Guid, repositoryId As Guid, Optional filter As String = Nothing, Optional includeLinks As Nullable(Of Boolean) = Nothing, Optional latestStatusesOnly As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRef))" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitCompatHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="filter" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid project, string repositoryId, string filter = default, bool? includeLinks = default, bool? latestStatusesOnly = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid project, string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRefsAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRefsAsync (project As Guid, repositoryId As String, Optional filter As String = Nothing, Optional includeLinks As Nullable(Of Boolean) = Nothing, Optional latestStatusesOnly As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRef))" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : Guid * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : Guid * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitCompatHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="filter" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string project, Guid repositoryId, string filter = default, bool? includeLinks = default, bool? latestStatusesOnly = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string project, valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRefsAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRefsAsync (project As String, repositoryId As Guid, Optional filter As String = Nothing, Optional includeLinks As Nullable(Of Boolean) = Nothing, Optional latestStatusesOnly As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRef))" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : string * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : string * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitCompatHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="filter" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string project, string repositoryId, string filter = default, bool? includeLinks = default, bool? latestStatusesOnly = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string project, string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRefsAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRefsAsync (project As String, repositoryId As String, Optional filter As String = Nothing, Optional includeLinks As Nullable(Of Boolean) = Nothing, Optional latestStatusesOnly As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRef))" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitCompatHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="filter" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="6" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (bool? includeLinks, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.Nullable{System.Boolean},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (includeLinks As Nullable(Of Boolean), userState As Object) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : Nullable&lt;bool&gt; * obj -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : Nullable&lt;bool&gt; * obj -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (includeLinks, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="includeLinks" />
        <param name="userState" />
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (Guid project, bool? includeLinks, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Guid project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.Guid,System.Nullable{System.Boolean},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (project As Guid, includeLinks As Nullable(Of Boolean), userState As Object) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * obj -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * obj -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (project, includeLinks, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="includeLinks" />
        <param name="userState" />
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (bool? includeLinks, object userState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (includeLinks As Nullable(Of Boolean), userState As Object, cancellationToken As CancellationToken) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includeLinks" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (string project, bool? includeLinks, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(string project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.String,System.Nullable{System.Boolean},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (project As String, includeLinks As Nullable(Of Boolean), userState As Object) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : string * Nullable&lt;bool&gt; * obj -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : string * Nullable&lt;bool&gt; * obj -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (project, includeLinks, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="includeLinks">To be added.</param>
        <param name="userState">To be added.</param>
        <param name="project">Project ID or project name</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (Guid project, bool? includeLinks, object userState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Guid project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (project As Guid, includeLinks As Nullable(Of Boolean), userState As Object, cancellationToken As CancellationToken) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (project, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="includeLinks" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (bool? includeLinks, bool? includeAllUrls, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeAllUrls, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (includeLinks As Nullable(Of Boolean), includeAllUrls As Nullable(Of Boolean), Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (includeLinks, includeAllUrls, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeAllUrls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includeLinks" />
        <param name="includeAllUrls" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (string project, bool? includeLinks, object userState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(string project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (project As String, includeLinks As Nullable(Of Boolean), userState As Object, cancellationToken As CancellationToken) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (project, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="includeLinks" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (Guid project, bool? includeLinks, bool? includeAllUrls, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Guid project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeAllUrls, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (project As Guid, includeLinks As Nullable(Of Boolean), includeAllUrls As Nullable(Of Boolean), Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (project, includeLinks, includeAllUrls, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeAllUrls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="includeLinks" />
        <param name="includeAllUrls" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (string project, bool? includeLinks, bool? includeAllUrls, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(string project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeAllUrls, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoriesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoriesAsync (project As String, includeLinks As Nullable(Of Boolean), includeAllUrls As Nullable(Of Boolean), Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of GitRepository))" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoriesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;&#xA;override this.GetRepositoriesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitCompatHttpClientBase.GetRepositoriesAsync (project, includeLinks, includeAllUrls, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeAllUrls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="includeLinks" />
        <param name="includeAllUrls" />
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (repositoryId As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="userState" Type="System.Object" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="repositoryId">
        </param>
        <param name="userState">
        </param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (repositoryId As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="userState" Type="System.Object" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="repositoryId">
        </param>
        <param name="userState">
        </param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, Guid repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As Guid, repositoryId As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="userState" Type="System.Object" Index="2" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">
        </param>
        <param name="userState">
        </param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid repositoryId, bool? includeParent = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (repositoryId As Guid, Optional includeParent As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, string repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As Guid, repositoryId As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="userState" Type="System.Object" Index="2" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">
        </param>
        <param name="userState">
        </param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, Guid repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As String, repositoryId As Guid, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="userState" Type="System.Object" Index="2" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">
        </param>
        <param name="userState">
        </param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string repositoryId, bool? includeParent = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (repositoryId As String, Optional includeParent As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, string repositoryId, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As String, repositoryId As String, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="userState" Type="System.Object" Index="2" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">
        </param>
        <param name="userState">
        </param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, Guid repositoryId, bool? includeParent = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As Guid, repositoryId As Guid, Optional includeParent As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, string repositoryId, bool? includeParent = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As Guid, repositoryId As String, Optional includeParent As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, Guid repositoryId, bool? includeParent = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As String, repositoryId As Guid, Optional includeParent As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.Guid" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, string repositoryId, bool? includeParent = default, object userState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase.GetRepositoryAsync(System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryAsync (project As String, repositoryId As String, Optional includeParent As Nullable(Of Boolean) = Nothing, Optional userState As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GitRepository)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitCompatHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="repositoryId" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="userState" Type="System.Object" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState" />
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
