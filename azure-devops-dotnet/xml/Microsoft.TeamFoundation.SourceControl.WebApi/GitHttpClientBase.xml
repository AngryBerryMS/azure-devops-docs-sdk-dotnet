<Type Name="GitHttpClientBase" FullName="Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase">
  <TypeSignature Language="C#" Value="public abstract class GitHttpClientBase : Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GitHttpClientBase extends Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GitHttpClientBase&#xA;Inherits GitCompatHttpClientBase" />
  <TypeSignature Language="F#" Value="type GitHttpClientBase = class&#xA;    inherit GitCompatHttpClientBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
    <AssemblyVersion>16.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualStudio.Services.WebApi.ResourceArea("4E080C62-FA21-4FBC-8FEF-2A10A2B38049")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase (baseUrl, credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials, Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials, class Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials, settings As VssHttpRequestSettings)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials * Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase (baseUrl, credentials, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
        <Parameter Name="settings" Type="Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings" />
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <param name="settings">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase (baseUrl, credentials, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-devops-dotnet-latest">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <param name="handlers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitHttpClientBase (Uri baseUrl, System.Net.Http.HttpMessageHandler pipeline, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class System.Net.Http.HttpMessageHandler pipeline, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.#ctor(System.Uri,System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, pipeline As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase : Uri * System.Net.Http.HttpMessageHandler * bool -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase (baseUrl, pipeline, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="pipeline" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="pipeline">To be added.</param>
        <param name="disposeHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GitHttpClientBase (Uri baseUrl, Microsoft.VisualStudio.Services.Common.VssCredentials credentials, Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUrl, class Microsoft.VisualStudio.Services.Common.VssCredentials credentials, class Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings settings, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.#ctor(System.Uri,Microsoft.VisualStudio.Services.Common.VssCredentials,Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUrl As Uri, credentials As VssCredentials, settings As VssHttpRequestSettings, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase : Uri * Microsoft.VisualStudio.Services.Common.VssCredentials * Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase" Usage="new Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase (baseUrl, credentials, settings, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUrl" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.VisualStudio.Services.Common.VssCredentials" />
        <Parameter Name="settings" Type="Microsoft.VisualStudio.Services.Common.VssHttpRequestSettings" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-devops-dotnet-latest">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="baseUrl">To be added.</param>
        <param name="credentials">To be added.</param>
        <param name="settings">To be added.</param>
        <param name="handlers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAnnotatedTagAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.CreateAnnotatedTagAsync (tagObject, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagObject" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tagObject">Object containing details of tag to be created.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAnnotatedTagAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.CreateAnnotatedTagAsync (tagObject, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagObject" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tagObject">Object containing details of tag to be created.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAnnotatedTagAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.CreateAnnotatedTagAsync (tagObject, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagObject" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tagObject">Object containing details of tag to be created.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; CreateAnnotatedTagAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag tagObject, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAnnotatedTagAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.CreateAnnotatedTagAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.CreateAnnotatedTagAsync (tagObject, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagObject" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tagObject">Object containing details of tag to be created.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync (System.IO.Stream uploadStream, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync(class System.IO.Stream uploadStream, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAttachmentAsync(System.IO.Stream,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAttachmentAsync : System.IO.Stream * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&#xA;override this.CreateAttachmentAsync : System.IO.Stream * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;" Usage="gitHttpClientBase.CreateAttachmentAsync (uploadStream, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uploadStream" Type="System.IO.Stream" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uploadStream">Stream to upload</param>
        <param name="fileName">The name of the file.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Attach a new file to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync (System.IO.Stream uploadStream, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync(class System.IO.Stream uploadStream, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAttachmentAsync(System.IO.Stream,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAttachmentAsync : System.IO.Stream * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&#xA;override this.CreateAttachmentAsync : System.IO.Stream * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;" Usage="gitHttpClientBase.CreateAttachmentAsync (uploadStream, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uploadStream" Type="System.IO.Stream" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uploadStream">Stream to upload</param>
        <param name="fileName">The name of the file.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Attach a new file to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync (System.IO.Stream uploadStream, Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync(class System.IO.Stream uploadStream, valuetype System.Guid project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAttachmentAsync(System.IO.Stream,System.Guid,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAttachmentAsync : System.IO.Stream * Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&#xA;override this.CreateAttachmentAsync : System.IO.Stream * Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;" Usage="gitHttpClientBase.CreateAttachmentAsync (uploadStream, project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uploadStream" Type="System.IO.Stream" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uploadStream">Stream to upload</param>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the file.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Attach a new file to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync (System.IO.Stream uploadStream, Guid project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync(class System.IO.Stream uploadStream, valuetype System.Guid project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAttachmentAsync(System.IO.Stream,System.Guid,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAttachmentAsync : System.IO.Stream * Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&#xA;override this.CreateAttachmentAsync : System.IO.Stream * Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;" Usage="gitHttpClientBase.CreateAttachmentAsync (uploadStream, project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uploadStream" Type="System.IO.Stream" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uploadStream">Stream to upload</param>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the file.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Attach a new file to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync (System.IO.Stream uploadStream, string project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync(class System.IO.Stream uploadStream, string project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAttachmentAsync(System.IO.Stream,System.String,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAttachmentAsync : System.IO.Stream * string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&#xA;override this.CreateAttachmentAsync : System.IO.Stream * string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;" Usage="gitHttpClientBase.CreateAttachmentAsync (uploadStream, project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uploadStream" Type="System.IO.Stream" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uploadStream">Stream to upload</param>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the file.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Attach a new file to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync (System.IO.Stream uploadStream, string project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt; CreateAttachmentAsync(class System.IO.Stream uploadStream, string project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateAttachmentAsync(System.IO.Stream,System.String,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAttachmentAsync : System.IO.Stream * string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&#xA;override this.CreateAttachmentAsync : System.IO.Stream * string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;" Usage="gitHttpClientBase.CreateAttachmentAsync (uploadStream, project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uploadStream" Type="System.IO.Stream" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uploadStream">Stream to upload</param>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the file.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Attach a new file to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCherryPickAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.CreateCherryPickAsync (cherryPickToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cherryPickToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cherryPickToCreate"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Cherry pick a specific commit or commits that are associated to a pull request into a new branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCherryPickAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.CreateCherryPickAsync (cherryPickToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cherryPickToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cherryPickToCreate"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Cherry pick a specific commit or commits that are associated to a pull request into a new branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCherryPickAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.CreateCherryPickAsync (cherryPickToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cherryPickToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cherryPickToCreate"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Cherry pick a specific commit or commits that are associated to a pull request into a new branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; CreateCherryPickAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters cherryPickToCreate, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCherryPickAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.CreateCherryPickAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.CreateCherryPickAsync (cherryPickToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cherryPickToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cherryPickToCreate"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Cherry pick a specific commit or commits that are associated to a pull request into a new branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.CreateCommentAsync (comment, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment to create.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a comment on a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.CreateCommentAsync (comment, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment to create.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a comment on a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, Guid project, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.CreateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a comment on a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, Guid project, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.CreateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a comment on a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.CreateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a comment on a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; CreateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.CreateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.CreateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a comment on a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommitStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string commitId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string commitId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommitStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&#xA;override this.CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;" Usage="gitHttpClientBase.CreateCommitStatusAsync (gitCommitStatusToCreate, commitId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitCommitStatusToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitCommitStatusToCreate">Git commit status object to create.</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create Git commit status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommitStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string commitId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string commitId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommitStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&#xA;override this.CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;" Usage="gitHttpClientBase.CreateCommitStatusAsync (gitCommitStatusToCreate, commitId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitCommitStatusToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitCommitStatusToCreate">Git commit status object to create.</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create Git commit status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommitStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, Guid project, string commitId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, valuetype System.Guid project, string commitId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommitStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus,System.Guid,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * Guid * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&#xA;override this.CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * Guid * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;" Usage="gitHttpClientBase.CreateCommitStatusAsync (gitCommitStatusToCreate, project, commitId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitCommitStatusToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitCommitStatusToCreate">Git commit status object to create.</param>
        <param name="project">Project ID</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create Git commit status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommitStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, Guid project, string commitId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, valuetype System.Guid project, string commitId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommitStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus,System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&#xA;override this.CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;" Usage="gitHttpClientBase.CreateCommitStatusAsync (gitCommitStatusToCreate, project, commitId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitCommitStatusToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitCommitStatusToCreate">Git commit status object to create.</param>
        <param name="project">Project ID</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create Git commit status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommitStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string project, string commitId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string project, string commitId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommitStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus,System.String,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&#xA;override this.CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;" Usage="gitHttpClientBase.CreateCommitStatusAsync (gitCommitStatusToCreate, project, commitId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitCommitStatusToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitCommitStatusToCreate">Git commit status object to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create Git commit status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommitStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string project, string commitId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt; CreateCommitStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus gitCommitStatusToCreate, string project, string commitId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateCommitStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus,System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&#xA;override this.CreateCommitStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;" Usage="gitHttpClientBase.CreateCommitStatusAsync (gitCommitStatusToCreate, project, commitId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitCommitStatusToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitCommitStatusToCreate">Git commit status object to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create Git commit status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFavoriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; CreateFavoriteAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite favorite, Guid project, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; CreateFavoriteAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite favorite, valuetype System.Guid project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateFavoriteAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateFavoriteAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&#xA;override this.CreateFavoriteAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;" Usage="gitHttpClientBase.CreateFavoriteAsync (favorite, project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favorite" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="favorite">The ref favorite to create.</param>
        <param name="project">Project ID</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creates a ref favorite
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFavoriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; CreateFavoriteAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite favorite, string project, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; CreateFavoriteAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite favorite, string project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateFavoriteAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateFavoriteAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&#xA;override this.CreateFavoriteAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;" Usage="gitHttpClientBase.CreateFavoriteAsync (favorite, project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favorite" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="favorite">The ref favorite to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creates a ref favorite
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateForkSyncRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.CreateForkSyncRequestAsync (syncParams, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncParams" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncParams">Source repository and ref mapping.</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request that another repository's refs be fetched into this one.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, string repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateForkSyncRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.CreateForkSyncRequestAsync (syncParams, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncParams" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncParams">Source repository and ref mapping.</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request that another repository's refs be fetched into this one.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, Guid project, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateForkSyncRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters,System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.CreateForkSyncRequestAsync (syncParams, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncParams" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncParams">Source repository and ref mapping.</param>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request that another repository's refs be fetched into this one.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, Guid project, string repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, valuetype System.Guid project, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateForkSyncRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters,System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.CreateForkSyncRequestAsync (syncParams, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncParams" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncParams">Source repository and ref mapping.</param>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request that another repository's refs be fetched into this one.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, string project, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, string project, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateForkSyncRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters,System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.CreateForkSyncRequestAsync (syncParams, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncParams" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncParams">Source repository and ref mapping.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request that another repository's refs be fetched into this one.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, string project, string repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; CreateForkSyncRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters syncParams, string project, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateForkSyncRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters,System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.CreateForkSyncRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.CreateForkSyncRequestAsync (syncParams, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncParams" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncParams">Source repository and ref mapping.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request that another repository's refs be fetched into this one.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.CreateImportRequestAsync (importRequest, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequest" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequest">The import request to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.CreateImportRequestAsync (importRequest, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequest" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequest">The import request to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.CreateImportRequestAsync (importRequest, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequest" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequest">The import request to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; CreateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequest, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.CreateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.CreateImportRequestAsync (importRequest, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequest" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequest">The import request to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create an import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateLikeAsync (Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateLikeAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateLikeAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateLikeAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateLikeAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.CreateLikeAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateLikeAsync (string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateLikeAsync(string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateLikeAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateLikeAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateLikeAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.CreateLikeAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateLikeAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateLikeAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateLikeAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateLikeAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateLikeAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.CreateLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateLikeAsync (Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateLikeAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateLikeAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateLikeAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateLikeAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.CreateLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateLikeAsync (string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateLikeAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateLikeAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateLikeAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateLikeAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.CreateLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateLikeAsync (string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateLikeAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateLikeAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateLikeAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateLikeAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.CreateLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, Guid project, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateMergeRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters,System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.CreateMergeRequestAsync (mergeParameters, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeParameters" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="mergeParameters">Parents commitIds and merge commit messsage.</param>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request a git merge operation. Currently we support merging only 2 commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, Guid project, string repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, valuetype System.Guid project, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateMergeRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters,System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.CreateMergeRequestAsync (mergeParameters, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeParameters" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="mergeParameters">Parents commitIds and merge commit messsage.</param>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request a git merge operation. Currently we support merging only 2 commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, string project, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, string project, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateMergeRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters,System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.CreateMergeRequestAsync (mergeParameters, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeParameters" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="mergeParameters">Parents commitIds and merge commit messsage.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request a git merge operation. Currently we support merging only 2 commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, string project, string repositoryNameOrId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; CreateMergeRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters mergeParameters, string project, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateMergeRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters,System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.CreateMergeRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.CreateMergeRequestAsync (mergeParameters, project, repositoryNameOrId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeParameters" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="mergeParameters">Parents commitIds and merge commit messsage.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Request a git merge operation. Currently we support merging only 2 commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, Guid repositoryId, Nullable&lt;bool&gt; supportsIterations = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; supportsIterations, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, repositoryId, supportsIterations, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="supportsIterations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate">The pull request to create.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="supportsIterations">If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string repositoryId, Nullable&lt;bool&gt; supportsIterations = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; supportsIterations, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, repositoryId, supportsIterations, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="supportsIterations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate">The pull request to create.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="supportsIterations">If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, Guid project, Guid repositoryId, Nullable&lt;bool&gt; supportsIterations = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; supportsIterations, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, supportsIterations, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="supportsIterations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate">The pull request to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="supportsIterations">If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, Guid project, string repositoryId, Nullable&lt;bool&gt; supportsIterations = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; supportsIterations, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, supportsIterations, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="supportsIterations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate">The pull request to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="supportsIterations">If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, Guid repositoryId, Nullable&lt;bool&gt; supportsIterations = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; supportsIterations, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, supportsIterations, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="supportsIterations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate">The pull request to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="supportsIterations">If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, string repositoryId, Nullable&lt;bool&gt; supportsIterations = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; CreatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToCreate, string project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; supportsIterations, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.CreatePullRequestAsync (gitPullRequestToCreate, project, repositoryId, supportsIterations, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="supportsIterations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToCreate">The pull request to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="supportsIterations">If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestIterationStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestIterationStatusAsync (status, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestIterationStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestIterationStatusAsync (status, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestIterationStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestIterationStatusAsync (status, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, Guid project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestIterationStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestIterationStatusAsync (status, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestIterationStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestIterationStatusAsync (status, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestIterationStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestIterationStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestIterationStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestIterationStatusAsync (status, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync (Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, Guid repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync(class Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, valuetype System.Guid repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestLabelAsync(Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.CreatePullRequestLabelAsync (label, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="label">Label to assign to the pull request.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a label for a specified pull request. The only required field is the name of the new label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync (Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, string repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync(class Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, string repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestLabelAsync(Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.CreatePullRequestLabelAsync (label, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="label">Label to assign to the pull request.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a label for a specified pull request. The only required field is the name of the new label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync (Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, Guid project, Guid repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync(class Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestLabelAsync(Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData,System.Guid,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.CreatePullRequestLabelAsync (label, project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="label">Label to assign to the pull request.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a label for a specified pull request. The only required field is the name of the new label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync (Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, Guid project, string repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync(class Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, valuetype System.Guid project, string repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestLabelAsync(Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData,System.Guid,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.CreatePullRequestLabelAsync (label, project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="label">Label to assign to the pull request.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a label for a specified pull request. The only required field is the name of the new label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync (Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, string project, Guid repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync(class Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, string project, valuetype System.Guid repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestLabelAsync(Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData,System.String,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.CreatePullRequestLabelAsync (label, project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="label">Label to assign to the pull request.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a label for a specified pull request. The only required field is the name of the new label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync (Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, string project, string repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; CreatePullRequestLabelAsync(class Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData label, string project, string repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestLabelAsync(Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData,System.String,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.CreatePullRequestLabelAsync : Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData * string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.CreatePullRequestLabelAsync (label, project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.TeamFoundation.Core.WebApi.WebApiCreateTagRequestData" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="label">Label to assign to the pull request.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a label for a specified pull request. The only required field is the name of the new label.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync (Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewerAsync(Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewerAsync (reviewer, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewer" Type="Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewer">Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a reviewer to a pull request or cast a vote.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync (Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewerAsync(Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewerAsync (reviewer, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewer" Type="Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewer">Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a reviewer to a pull request or cast a vote.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync (Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewerAsync(Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote,System.Guid,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewerAsync (reviewer, project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewer" Type="Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewer">Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a reviewer to a pull request or cast a vote.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync (Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, valuetype System.Guid project, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewerAsync(Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote,System.Guid,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewerAsync (reviewer, project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewer" Type="Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewer">Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a reviewer to a pull request or cast a vote.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync (Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, string project, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewerAsync(Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote,System.String,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewerAsync (reviewer, project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewer" Type="Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewer">Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a reviewer to a pull request or cast a vote.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync (Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, string project, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; CreatePullRequestReviewerAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote reviewer, string project, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewerAsync(Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote,System.String,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.CreatePullRequestReviewerAsync : Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote * string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewerAsync (reviewer, project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewer" Type="Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewer">Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add a reviewer to a pull request or cast a vote.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync (Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync(class Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewersAsync(Microsoft.VisualStudio.Services.WebApi.IdentityRef[],System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewersAsync (reviewers, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewers" Type="Microsoft.VisualStudio.Services.WebApi.IdentityRef[]" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewers">Reviewers to add to the pull request.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add reviewers to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync (Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync(class Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewersAsync(Microsoft.VisualStudio.Services.WebApi.IdentityRef[],System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewersAsync (reviewers, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewers" Type="Microsoft.VisualStudio.Services.WebApi.IdentityRef[]" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewers">Reviewers to add to the pull request.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add reviewers to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync (Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync(class Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewersAsync(Microsoft.VisualStudio.Services.WebApi.IdentityRef[],System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewersAsync (reviewers, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewers" Type="Microsoft.VisualStudio.Services.WebApi.IdentityRef[]" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewers">Reviewers to add to the pull request.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add reviewers to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync (Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync(class Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewersAsync(Microsoft.VisualStudio.Services.WebApi.IdentityRef[],System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewersAsync (reviewers, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewers" Type="Microsoft.VisualStudio.Services.WebApi.IdentityRef[]" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewers">Reviewers to add to the pull request.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add reviewers to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync (Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync(class Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewersAsync(Microsoft.VisualStudio.Services.WebApi.IdentityRef[],System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewersAsync (reviewers, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewers" Type="Microsoft.VisualStudio.Services.WebApi.IdentityRef[]" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewers">Reviewers to add to the pull request.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add reviewers to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync (Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; CreatePullRequestReviewersAsync(class Microsoft.VisualStudio.Services.WebApi.IdentityRef[] reviewers, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestReviewersAsync(Microsoft.VisualStudio.Services.WebApi.IdentityRef[],System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.CreatePullRequestReviewersAsync : Microsoft.VisualStudio.Services.WebApi.IdentityRef[] * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.CreatePullRequestReviewersAsync (reviewers, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reviewers" Type="Microsoft.VisualStudio.Services.WebApi.IdentityRef[]" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reviewers">Reviewers to add to the pull request.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Add reviewers to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestStatusAsync (status, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestStatusAsync (status, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestStatusAsync (status, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestStatusAsync (status, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestStatusAsync (status, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; CreatePullRequestStatusAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus status, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePullRequestStatusAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.CreatePullRequestStatusAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.CreatePullRequestStatusAsync (status, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="status">Pull request status to create.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePushAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPush,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.CreatePushAsync (push, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="push" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPush" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="push"></param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Push changes to the repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePushAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPush,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.CreatePushAsync (push, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="push" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPush" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="push"></param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Push changes to the repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePushAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPush,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.CreatePushAsync (push, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="push" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPush" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="push"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Push changes to the repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePushAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPush,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.CreatePushAsync (push, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="push" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPush" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="push"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Push changes to the repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePushAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPush,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.CreatePushAsync (push, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="push" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPush" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="push"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Push changes to the repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; CreatePushAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush push, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreatePushAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPush,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.CreatePushAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPush * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.CreatePushAsync (push, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="push" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPush" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="push"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Push changes to the repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions gitRepositoryToCreate, string sourceRef = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions gitRepositoryToCreate, string sourceRef, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.CreateRepositoryAsync (gitRepositoryToCreate, sourceRef, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitRepositoryToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions" />
        <Parameter Name="sourceRef" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitRepositoryToCreate">Specify the repo name, team project and/or parent repository. Team project information can be ommitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).</param>
        <param name="sourceRef">[optional] Specify the source refs to use while creating a fork repo</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git repository in a team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions gitRepositoryToCreate, Guid project, string sourceRef = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions gitRepositoryToCreate, valuetype System.Guid project, string sourceRef, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.CreateRepositoryAsync (gitRepositoryToCreate, project, sourceRef, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitRepositoryToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="sourceRef" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitRepositoryToCreate">Specify the repo name, team project and/or parent repository. Team project information can be ommitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).</param>
        <param name="project">Project ID</param>
        <param name="sourceRef">[optional] Specify the source refs to use while creating a fork repo</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git repository in a team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions gitRepositoryToCreate, string project, string sourceRef = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; CreateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions gitRepositoryToCreate, string project, string sourceRef, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CreateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.CreateRepositoryAsync (gitRepositoryToCreate, project, sourceRef, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitRepositoryToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="sourceRef" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitRepositoryToCreate">Specify the repo name, team project and/or parent repository. Team project information can be ommitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).</param>
        <param name="project">Project ID or project name</param>
        <param name="sourceRef">[optional] Specify the source refs to use while creating a fork repo</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a git repository in a team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRevertAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.CreateRevertAsync (revertToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="revertToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="revertToCreate"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRevertAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.CreateRevertAsync (revertToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="revertToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="revertToCreate"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRevertAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.CreateRevertAsync (revertToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="revertToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="revertToCreate"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; CreateRevertAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters revertToCreate, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateRevertAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.CreateRevertAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.CreateRevertAsync (revertToCreate, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="revertToCreate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="revertToCreate"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.CreateThreadAsync (commentThread, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread to create. Thread must contain at least one comment.</param>
        <param name="repositoryId">Repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.CreateThreadAsync (commentThread, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread to create. Thread must contain at least one comment.</param>
        <param name="repositoryId">Repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.CreateThreadAsync (commentThread, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread to create. Thread must contain at least one comment.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">Repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.CreateThreadAsync (commentThread, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread to create. Thread must contain at least one comment.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">Repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.CreateThreadAsync (commentThread, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread to create. Thread must contain at least one comment.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; CreateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.CreateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.CreateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.CreateThreadAsync (commentThread, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread to create. Thread must contain at least one comment.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAttachmentAsync (string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAttachmentAsync(string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteAttachmentAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAttachmentAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAttachmentAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteAttachmentAsync (fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the attachment to delete.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAttachmentAsync (string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAttachmentAsync(string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteAttachmentAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAttachmentAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAttachmentAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteAttachmentAsync (fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the attachment to delete.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAttachmentAsync (Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAttachmentAsync(valuetype System.Guid project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteAttachmentAsync(System.Guid,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAttachmentAsync : Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAttachmentAsync : Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteAttachmentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the attachment to delete.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAttachmentAsync (Guid project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAttachmentAsync(valuetype System.Guid project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteAttachmentAsync(System.Guid,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAttachmentAsync : Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAttachmentAsync : Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteAttachmentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the attachment to delete.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAttachmentAsync (string project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAttachmentAsync(string project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteAttachmentAsync(System.String,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAttachmentAsync : string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAttachmentAsync : string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteAttachmentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the attachment to delete.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteAttachmentAsync (string project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAttachmentAsync(string project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteAttachmentAsync(System.String,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAttachmentAsync : string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAttachmentAsync : string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteAttachmentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the attachment to delete.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteCommentAsync (Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCommentAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteCommentAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCommentAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteCommentAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteCommentAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteCommentAsync (string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCommentAsync(string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteCommentAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCommentAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteCommentAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteCommentAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteCommentAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCommentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteCommentAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCommentAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteCommentAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteCommentAsync (Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCommentAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteCommentAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCommentAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteCommentAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteCommentAsync (string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCommentAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteCommentAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCommentAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteCommentAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteCommentAsync (string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCommentAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteCommentAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCommentAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteCommentAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteLikeAsync (Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLikeAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteLikeAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLikeAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteLikeAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteLikeAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteLikeAsync (string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLikeAsync(string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteLikeAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLikeAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteLikeAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteLikeAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteLikeAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLikeAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteLikeAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLikeAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteLikeAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteLikeAsync (Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLikeAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteLikeAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLikeAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteLikeAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteLikeAsync (string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLikeAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteLikeAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLikeAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteLikeAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLikeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteLikeAsync (string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLikeAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteLikeAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLikeAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteLikeAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteLikeAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a like on a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync (Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestIterationStatusAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestIterationStatusAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestIterationStatusAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestIterationStatusAsync (repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request iteration status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync (string repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync(string repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestIterationStatusAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestIterationStatusAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestIterationStatusAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestIterationStatusAsync (repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request iteration status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync (Guid project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestIterationStatusAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestIterationStatusAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestIterationStatusAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request iteration status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync (Guid project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestIterationStatusAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestIterationStatusAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestIterationStatusAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request iteration status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync (string project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestIterationStatusAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestIterationStatusAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestIterationStatusAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request iteration status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync (string project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestIterationStatusAsync(string project, string repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestIterationStatusAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestIterationStatusAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestIterationStatusAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request iteration status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestLabelsAsync (Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestLabelsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestLabelsAsync(System.Guid,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestLabelsAsync : Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestLabelsAsync : Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestLabelsAsync (repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Removes a label from the set of those assigned to the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestLabelsAsync (string repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestLabelsAsync(string repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestLabelsAsync(System.String,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestLabelsAsync : string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestLabelsAsync : string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestLabelsAsync (repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Removes a label from the set of those assigned to the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestLabelsAsync (Guid project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestLabelsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestLabelsAsync(System.Guid,System.Guid,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestLabelsAsync : Guid * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestLabelsAsync : Guid * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestLabelsAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Removes a label from the set of those assigned to the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestLabelsAsync (Guid project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestLabelsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestLabelsAsync(System.Guid,System.String,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestLabelsAsync : Guid * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestLabelsAsync : Guid * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestLabelsAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Removes a label from the set of those assigned to the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestLabelsAsync (string project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestLabelsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestLabelsAsync(System.String,System.Guid,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestLabelsAsync : string * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestLabelsAsync : string * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestLabelsAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Removes a label from the set of those assigned to the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestLabelsAsync (string project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestLabelsAsync(string project, string repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestLabelsAsync(System.String,System.String,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestLabelsAsync : string * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestLabelsAsync : string * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestLabelsAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Removes a label from the set of those assigned to the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestReviewerAsync (Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestReviewerAsync(valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestReviewerAsync(System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestReviewerAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestReviewerAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestReviewerAsync (repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer to remove.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Remove a reviewer from a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestReviewerAsync (string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestReviewerAsync(string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestReviewerAsync(System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestReviewerAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestReviewerAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestReviewerAsync (repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer to remove.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Remove a reviewer from a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestReviewerAsync (Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestReviewerAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestReviewerAsync(System.Guid,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestReviewerAsync : Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestReviewerAsync : Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer to remove.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Remove a reviewer from a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestReviewerAsync (Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestReviewerAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestReviewerAsync(System.Guid,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestReviewerAsync : Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestReviewerAsync : Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer to remove.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Remove a reviewer from a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestReviewerAsync (string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestReviewerAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestReviewerAsync(System.String,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestReviewerAsync : string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestReviewerAsync : string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer to remove.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Remove a reviewer from a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestReviewerAsync (string project, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestReviewerAsync(string project, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestReviewerAsync(System.String,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestReviewerAsync : string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestReviewerAsync : string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer to remove.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Remove a reviewer from a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestStatusAsync (Guid repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestStatusAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestStatusAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestStatusAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestStatusAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestStatusAsync (repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestStatusAsync (string repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestStatusAsync(string repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestStatusAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestStatusAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestStatusAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestStatusAsync (repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestStatusAsync (Guid project, Guid repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestStatusAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestStatusAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestStatusAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestStatusAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestStatusAsync (Guid project, string repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestStatusAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestStatusAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestStatusAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestStatusAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestStatusAsync (string project, Guid repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestStatusAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestStatusAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestStatusAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestStatusAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeletePullRequestStatusAsync (string project, string repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeletePullRequestStatusAsync(string project, string repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeletePullRequestStatusAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeletePullRequestStatusAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeletePullRequestStatusAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeletePullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete pull request status.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRefFavoriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRefFavoriteAsync (Guid project, int favoriteId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRefFavoriteAsync(valuetype System.Guid project, int32 favoriteId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRefFavoriteAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRefFavoriteAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRefFavoriteAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRefFavoriteAsync (project, favoriteId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="favoriteId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="favoriteId">The Id of the ref favorite to delete.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Deletes the refs favorite specified
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRefFavoriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRefFavoriteAsync (string project, int favoriteId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRefFavoriteAsync(string project, int32 favoriteId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRefFavoriteAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRefFavoriteAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRefFavoriteAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRefFavoriteAsync (project, favoriteId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="favoriteId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="favoriteId">The Id of the ref favorite to delete.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Deletes the refs favorite specified
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRepositoryAsync (Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRepositoryAsync(valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRepositoryAsync(System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepositoryAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRepositoryAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRepositoryAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a git repository
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRepositoryAsync (Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRepositoryAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRepositoryAsync(System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepositoryAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRepositoryAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a git repository
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRepositoryAsync (string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRepositoryAsync(string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRepositoryAsync(System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepositoryAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRepositoryAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Delete a git repository
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepositoryFromRecycleBinAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRepositoryFromRecycleBinAsync (Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRepositoryFromRecycleBinAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRepositoryFromRecycleBinAsync(System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepositoryFromRecycleBinAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRepositoryFromRecycleBinAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRepositoryFromRecycleBinAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Destroy (hard delete) a soft-deleted Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepositoryFromRecycleBinAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteRepositoryFromRecycleBinAsync (string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteRepositoryFromRecycleBinAsync(string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.DeleteRepositoryFromRecycleBinAsync(System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepositoryFromRecycleBinAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteRepositoryFromRecycleBinAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.DeleteRepositoryFromRecycleBinAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Destroy (hard delete) a soft-deleted Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync (Guid project, Guid repositoryId, string objectId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string objectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAnnotatedTagAsync(System.Guid,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotatedTagAsync : Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.GetAnnotatedTagAsync : Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.GetAnnotatedTagAsync (project, repositoryId, objectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="objectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="objectId">ObjectId (Sha1Id) of tag to get.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync (Guid project, string repositoryId, string objectId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync(valuetype System.Guid project, string repositoryId, string objectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAnnotatedTagAsync(System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotatedTagAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.GetAnnotatedTagAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.GetAnnotatedTagAsync (project, repositoryId, objectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="objectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="objectId">ObjectId (Sha1Id) of tag to get.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync (string project, Guid repositoryId, string objectId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync(string project, valuetype System.Guid repositoryId, string objectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAnnotatedTagAsync(System.String,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotatedTagAsync : string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.GetAnnotatedTagAsync : string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.GetAnnotatedTagAsync (project, repositoryId, objectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="objectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="objectId">ObjectId (Sha1Id) of tag to get.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotatedTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync (string project, string repositoryId, string objectId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt; GetAnnotatedTagAsync(string project, string repositoryId, string objectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAnnotatedTagAsync(System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotatedTagAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;&#xA;override this.GetAnnotatedTagAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;" Usage="gitHttpClientBase.GetAnnotatedTagAsync (project, repositoryId, objectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="objectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="objectId">ObjectId (Sha1Id) of tag to get.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get an annotated tag.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentContentAsync (string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentContentAsync(string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentContentAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentContentAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentContentAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentContentAsync (fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentContentAsync (string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentContentAsync(string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentContentAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentContentAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentContentAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentContentAsync (fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentContentAsync (Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentContentAsync(valuetype System.Guid project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentContentAsync(System.Guid,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentContentAsync : Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentContentAsync : Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentContentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentContentAsync (Guid project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentContentAsync(valuetype System.Guid project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentContentAsync(System.Guid,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentContentAsync : Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentContentAsync : Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentContentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentContentAsync (string project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentContentAsync(string project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentContentAsync(System.String,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentContentAsync : string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentContentAsync : string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentContentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentContentAsync (string project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentContentAsync(string project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentContentAsync(System.String,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentContentAsync : string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentContentAsync : string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentContentAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync (Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentsAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;&#xA;override this.GetAttachmentsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;" Usage="gitHttpClientBase.GetAttachmentsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a list of files attached to a given pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync (string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentsAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;&#xA;override this.GetAttachmentsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;" Usage="gitHttpClientBase.GetAttachmentsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a list of files attached to a given pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentsAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;&#xA;override this.GetAttachmentsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;" Usage="gitHttpClientBase.GetAttachmentsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a list of files attached to a given pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync (Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentsAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;&#xA;override this.GetAttachmentsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;" Usage="gitHttpClientBase.GetAttachmentsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a list of files attached to a given pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync (string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentsAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;&#xA;override this.GetAttachmentsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;" Usage="gitHttpClientBase.GetAttachmentsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a list of files attached to a given pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync (string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt; GetAttachmentsAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentsAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;&#xA;override this.GetAttachmentsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;" Usage="gitHttpClientBase.GetAttachmentsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a list of files attached to a given pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentZipAsync (string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentZipAsync(string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentZipAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentZipAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentZipAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentZipAsync (fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentZipAsync (string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentZipAsync(string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentZipAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentZipAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentZipAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentZipAsync (fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentZipAsync (Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentZipAsync(valuetype System.Guid project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentZipAsync(System.Guid,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentZipAsync : Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentZipAsync : Guid * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentZipAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentZipAsync (Guid project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentZipAsync(valuetype System.Guid project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentZipAsync(System.Guid,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentZipAsync : Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentZipAsync : Guid * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentZipAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentZipAsync (string project, string fileName, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentZipAsync(string project, string fileName, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentZipAsync(System.String,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentZipAsync : string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentZipAsync : string * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentZipAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentZipAsync (string project, string fileName, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentZipAsync(string project, string fileName, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetAttachmentZipAsync(System.String,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentZipAsync : string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetAttachmentZipAsync : string * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetAttachmentZipAsync (project, fileName, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="fileName">The name of the attachment.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file content of a pull request attachment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobAsync : Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobAsync : string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;&#xA;override this.GetBlobAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (Guid project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobAsync : Guid * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobAsync : string * Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync (string project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt; GetBlobAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobAsync : string * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;" Usage="gitHttpClientBase.GetBlobAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobContentAsync : Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobContentAsync : string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobContentAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobContentAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobContentAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (Guid project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobContentAsync : Guid * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobContentAsync : string * Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobContentAsync (string project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobContentAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobContentAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobContentAsync : string * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobContentAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobsZipAsync (System.Collections.Generic.IEnumerable&lt;string&gt; blobIds, Guid repositoryId, string filename = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobsZipAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; blobIds, valuetype System.Guid repositoryId, string filename, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobsZipAsync(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsZipAsync : seq&lt;string&gt; * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobsZipAsync : seq&lt;string&gt; * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobsZipAsync (blobIds, repositoryId, filename, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobIds">Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filename"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets one or more blobs in a zip file download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobsZipAsync (System.Collections.Generic.IEnumerable&lt;string&gt; blobIds, string repositoryId, string filename = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobsZipAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; blobIds, string repositoryId, string filename, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobsZipAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsZipAsync : seq&lt;string&gt; * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobsZipAsync : seq&lt;string&gt; * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobsZipAsync (blobIds, repositoryId, filename, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobIds">Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filename"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets one or more blobs in a zip file download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobsZipAsync (System.Collections.Generic.IEnumerable&lt;string&gt; blobIds, Guid project, Guid repositoryId, string filename = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobsZipAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; blobIds, valuetype System.Guid project, valuetype System.Guid repositoryId, string filename, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobsZipAsync(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsZipAsync : seq&lt;string&gt; * Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobsZipAsync : seq&lt;string&gt; * Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobsZipAsync (blobIds, project, repositoryId, filename, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobIds">Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filename"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets one or more blobs in a zip file download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobsZipAsync (System.Collections.Generic.IEnumerable&lt;string&gt; blobIds, Guid project, string repositoryId, string filename = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobsZipAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; blobIds, valuetype System.Guid project, string repositoryId, string filename, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobsZipAsync(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsZipAsync : seq&lt;string&gt; * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobsZipAsync : seq&lt;string&gt; * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobsZipAsync (blobIds, project, repositoryId, filename, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobIds">Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filename"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets one or more blobs in a zip file download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobsZipAsync (System.Collections.Generic.IEnumerable&lt;string&gt; blobIds, string project, Guid repositoryId, string filename = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobsZipAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; blobIds, string project, valuetype System.Guid repositoryId, string filename, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobsZipAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsZipAsync : seq&lt;string&gt; * string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobsZipAsync : seq&lt;string&gt; * string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobsZipAsync (blobIds, project, repositoryId, filename, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobIds">Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filename"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets one or more blobs in a zip file download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobsZipAsync (System.Collections.Generic.IEnumerable&lt;string&gt; blobIds, string project, string repositoryId, string filename = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobsZipAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; blobIds, string project, string repositoryId, string filename, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobsZipAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsZipAsync : seq&lt;string&gt; * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobsZipAsync : seq&lt;string&gt; * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobsZipAsync (blobIds, project, repositoryId, filename, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobIds">Blob IDs (SHA1 hashes) to be returned in the zip file.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filename"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets one or more blobs in a zip file download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobZipAsync : Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : string * Guid * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobZipAsync : string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobZipAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetBlobZipAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobZipAsync : Guid * Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (Guid project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(valuetype System.Guid project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string project, Guid repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string project, valuetype System.Guid repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobZipAsync : string * Guid * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetBlobZipAsync (string project, string repositoryId, string sha1, Nullable&lt;bool&gt; download = null, string fileName = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetBlobZipAsync(string project, string repositoryId, string sha1, valuetype System.Nullable`1&lt;bool&gt; download, string fileName, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBlobZipAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetBlobZipAsync : string * string * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetBlobZipAsync (project, repositoryId, sha1, download, fileName, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="sha1">SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.</param>
        <param name="download">If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip</param>
        <param name="fileName">Provide a fileName to use for a download.</param>
        <param name="resolveLfs">If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a single blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync (Guid repositoryId, string name, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync(valuetype System.Guid repositoryId, string name, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchAsync(System.Guid,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&#xA;override this.GetBranchAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;" Usage="gitHttpClientBase.GetBranchAsync (repositoryId, name, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="name">Name of the branch.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about a single branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync (string repositoryId, string name, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync(string repositoryId, string name, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchAsync(System.String,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&#xA;override this.GetBranchAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;" Usage="gitHttpClientBase.GetBranchAsync (repositoryId, name, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="name">Name of the branch.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about a single branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync (Guid project, Guid repositoryId, string name, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string name, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchAsync(System.Guid,System.Guid,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchAsync : Guid * Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&#xA;override this.GetBranchAsync : Guid * Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;" Usage="gitHttpClientBase.GetBranchAsync (project, repositoryId, name, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="name">Name of the branch.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about a single branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync (Guid project, string repositoryId, string name, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync(valuetype System.Guid project, string repositoryId, string name, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchAsync(System.Guid,System.String,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchAsync : Guid * string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&#xA;override this.GetBranchAsync : Guid * string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;" Usage="gitHttpClientBase.GetBranchAsync (project, repositoryId, name, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="name">Name of the branch.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about a single branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync (string project, Guid repositoryId, string name, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync(string project, valuetype System.Guid repositoryId, string name, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchAsync(System.String,System.Guid,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchAsync : string * Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&#xA;override this.GetBranchAsync : string * Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;" Usage="gitHttpClientBase.GetBranchAsync (project, repositoryId, name, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="name">Name of the branch.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about a single branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync (string project, string repositoryId, string name, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt; GetBranchAsync(string project, string repositoryId, string name, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchAsync(System.String,System.String,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchAsync : string * string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&#xA;override this.GetBranchAsync : string * string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;" Usage="gitHttpClientBase.GetBranchAsync (project, repositoryId, name, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="name">Name of the branch.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about a single branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync (Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync(valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchesAsync(System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchesAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchesAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchesAsync (repositoryId, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about all branches within a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync (string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync(string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchesAsync(System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchesAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchesAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchesAsync (repositoryId, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about all branches within a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync (Guid project, Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchesAsync(System.Guid,System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchesAsync : Guid * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchesAsync : Guid * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchesAsync (project, repositoryId, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about all branches within a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync (Guid project, string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync(valuetype System.Guid project, string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchesAsync(System.Guid,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchesAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchesAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchesAsync (project, repositoryId, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about all branches within a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync (string project, Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync(string project, valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchesAsync(System.String,System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchesAsync : string * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchesAsync : string * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchesAsync (project, repositoryId, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about all branches within a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync (string project, string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchesAsync(string project, string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor baseVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchesAsync(System.String,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchesAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchesAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchesAsync (project, repositoryId, baseVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="baseVersionDescriptor">Identifies the commit or branch to use as the base.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve statistics about all branches within a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchStatsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchStatsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchStatsBatchAsync (searchCriteria, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria"></param>
        <param name="repositoryId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchStatsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchStatsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchStatsBatchAsync (searchCriteria, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria"></param>
        <param name="repositoryId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchStatsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchStatsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchStatsBatchAsync (searchCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchStatsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchStatsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchStatsBatchAsync (searchCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchStatsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchStatsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchStatsBatchAsync (searchCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBranchStatsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt; GetBranchStatsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria searchCriteria, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetBranchStatsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;&#xA;override this.GetBranchStatsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;" Usage="gitHttpClientBase.GetBranchStatsBatchAsync (searchCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API]
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync (string commitId, Guid repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync(string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetChangesAsync(System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetChangesAsync : string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;&#xA;override this.GetChangesAsync : string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;" Usage="gitHttpClientBase.GetChangesAsync (commitId, repositoryId, top, skip, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="top">The maximum number of changes to return.</param>
        <param name="skip">The number of changes to skip.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve changes for a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync (string commitId, string repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync(string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetChangesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetChangesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;&#xA;override this.GetChangesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;" Usage="gitHttpClientBase.GetChangesAsync (commitId, repositoryId, top, skip, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="top">The maximum number of changes to return.</param>
        <param name="skip">The number of changes to skip.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve changes for a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync (Guid project, string commitId, Guid repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync(valuetype System.Guid project, string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetChangesAsync(System.Guid,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetChangesAsync : Guid * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;&#xA;override this.GetChangesAsync : Guid * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;" Usage="gitHttpClientBase.GetChangesAsync (project, commitId, repositoryId, top, skip, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="top">The maximum number of changes to return.</param>
        <param name="skip">The number of changes to skip.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve changes for a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync (Guid project, string commitId, string repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync(valuetype System.Guid project, string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetChangesAsync(System.Guid,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetChangesAsync : Guid * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;&#xA;override this.GetChangesAsync : Guid * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;" Usage="gitHttpClientBase.GetChangesAsync (project, commitId, repositoryId, top, skip, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="top">The maximum number of changes to return.</param>
        <param name="skip">The number of changes to skip.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve changes for a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync (string project, string commitId, Guid repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync(string project, string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetChangesAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetChangesAsync : string * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;&#xA;override this.GetChangesAsync : string * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;" Usage="gitHttpClientBase.GetChangesAsync (project, commitId, repositoryId, top, skip, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="top">The maximum number of changes to return.</param>
        <param name="skip">The number of changes to skip.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve changes for a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync (string project, string commitId, string repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt; GetChangesAsync(string project, string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetChangesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetChangesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;&#xA;override this.GetChangesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;" Usage="gitHttpClientBase.GetChangesAsync (project, commitId, repositoryId, top, skip, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="top">The maximum number of changes to return.</param>
        <param name="skip">The number of changes to skip.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve changes for a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync (Guid project, int cherryPickId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync(valuetype System.Guid project, int32 cherryPickId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickAsync(System.Guid,System.Int32,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickAsync : Guid * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickAsync : Guid * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickAsync (project, cherryPickId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="cherryPickId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="cherryPickId">ID of the cherry pick.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick by cherry pick Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync (Guid project, int cherryPickId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync(valuetype System.Guid project, int32 cherryPickId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickAsync(System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickAsync (project, cherryPickId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="cherryPickId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="cherryPickId">ID of the cherry pick.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick by cherry pick Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync (string project, int cherryPickId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync(string project, int32 cherryPickId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickAsync(System.String,System.Int32,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickAsync : string * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickAsync : string * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickAsync (project, cherryPickId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="cherryPickId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="cherryPickId">ID of the cherry pick.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick by cherry pick Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync (string project, int cherryPickId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickAsync(string project, int32 cherryPickId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickAsync(System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickAsync (project, cherryPickId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="cherryPickId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="cherryPickId">ID of the cherry pick.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick by cherry pick Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync (Guid project, Guid repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickForRefNameAsync(System.Guid,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickForRefNameAsync : Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickForRefNameAsync : Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync (Guid project, string repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync(valuetype System.Guid project, string repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickForRefNameAsync(System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickForRefNameAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickForRefNameAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync (string project, Guid repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync(string project, valuetype System.Guid repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickForRefNameAsync(System.String,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickForRefNameAsync : string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickForRefNameAsync : string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync (string project, string repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt; GetCherryPickForRefNameAsync(string project, string repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickForRefNameAsync(System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickForRefNameAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;&#xA;override this.GetCherryPickForRefNameAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;" Usage="gitHttpClientBase.GetCherryPickForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a cherry pick for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickRelationshipsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync (Guid repositoryNameOrId, string commitId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync(valuetype System.Guid repositoryNameOrId, string commitId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickRelationshipsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickRelationshipsAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCherryPickRelationshipsAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCherryPickRelationshipsAsync (repositoryNameOrId, commitId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId"></param>
        <param name="commitId"></param>
        <param name="includeLinks"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Given a <paramref name="commitId" />, returns a list of commits that are in the same cherry-pick family.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickRelationshipsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync (string repositoryNameOrId, string commitId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync(string repositoryNameOrId, string commitId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickRelationshipsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickRelationshipsAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCherryPickRelationshipsAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCherryPickRelationshipsAsync (repositoryNameOrId, commitId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId"></param>
        <param name="commitId"></param>
        <param name="includeLinks"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Given a <paramref name="commitId" />, returns a list of commits that are in the same cherry-pick family.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickRelationshipsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync (Guid project, Guid repositoryNameOrId, string commitId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync(valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, string commitId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickRelationshipsAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickRelationshipsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCherryPickRelationshipsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCherryPickRelationshipsAsync (project, repositoryNameOrId, commitId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId"></param>
        <param name="commitId"></param>
        <param name="includeLinks"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Given a <paramref name="commitId" />, returns a list of commits that are in the same cherry-pick family.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickRelationshipsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync (Guid project, string repositoryNameOrId, string commitId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync(valuetype System.Guid project, string repositoryNameOrId, string commitId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickRelationshipsAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickRelationshipsAsync : Guid * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCherryPickRelationshipsAsync : Guid * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCherryPickRelationshipsAsync (project, repositoryNameOrId, commitId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId"></param>
        <param name="commitId"></param>
        <param name="includeLinks"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Given a <paramref name="commitId" />, returns a list of commits that are in the same cherry-pick family.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickRelationshipsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync (string project, Guid repositoryNameOrId, string commitId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync(string project, valuetype System.Guid repositoryNameOrId, string commitId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickRelationshipsAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickRelationshipsAsync : string * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCherryPickRelationshipsAsync : string * Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCherryPickRelationshipsAsync (project, repositoryNameOrId, commitId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId"></param>
        <param name="commitId"></param>
        <param name="includeLinks"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Given a <paramref name="commitId" />, returns a list of commits that are in the same cherry-pick family.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCherryPickRelationshipsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync (string project, string repositoryNameOrId, string commitId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCherryPickRelationshipsAsync(string project, string repositoryNameOrId, string commitId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCherryPickRelationshipsAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCherryPickRelationshipsAsync : string * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCherryPickRelationshipsAsync : string * string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCherryPickRelationshipsAsync (project, repositoryNameOrId, commitId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId"></param>
        <param name="commitId"></param>
        <param name="includeLinks"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Given a <paramref name="commitId" />, returns a list of commits that are in the same cherry-pick family.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync (Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.GetCommentAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.GetCommentAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync (string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync(string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.GetCommentAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.GetCommentAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.GetCommentAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.GetCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync (Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.GetCommentAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.GetCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync (string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.GetCommentAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.GetCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync (string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; GetCommentAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.GetCommentAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.GetCommentAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync (Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentsAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentsAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;&#xA;override this.GetCommentsAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;" Usage="gitHttpClientBase.GetCommentsAsync (repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all comments associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync (string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync(string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentsAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentsAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;&#xA;override this.GetCommentsAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;" Usage="gitHttpClientBase.GetCommentsAsync (repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all comments associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentsAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentsAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;&#xA;override this.GetCommentsAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;" Usage="gitHttpClientBase.GetCommentsAsync (project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all comments associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync (Guid project, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentsAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentsAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;&#xA;override this.GetCommentsAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;" Usage="gitHttpClientBase.GetCommentsAsync (project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all comments associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync (string project, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentsAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentsAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;&#xA;override this.GetCommentsAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;" Usage="gitHttpClientBase.GetCommentsAsync (project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all comments associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync (string project, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt; GetCommentsAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommentsAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommentsAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;&#xA;override this.GetCommentsAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;" Usage="gitHttpClientBase.GetCommentsAsync (project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all comments associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync (string commitId, Guid repositoryId, Nullable&lt;int&gt; changeCount = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync(string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; changeCount, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitAsync(System.String,System.Guid,System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitAsync : string * Guid * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;&#xA;override this.GetCommitAsync : string * Guid * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;" Usage="gitHttpClientBase.GetCommitAsync (commitId, repositoryId, changeCount, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="changeCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="changeCount">The number of changes to include in the result.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync (string commitId, string repositoryId, Nullable&lt;int&gt; changeCount = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync(string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; changeCount, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitAsync(System.String,System.String,System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitAsync : string * string * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;&#xA;override this.GetCommitAsync : string * string * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;" Usage="gitHttpClientBase.GetCommitAsync (commitId, repositoryId, changeCount, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="changeCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="changeCount">The number of changes to include in the result.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync (Guid project, string commitId, Guid repositoryId, Nullable&lt;int&gt; changeCount = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync(valuetype System.Guid project, string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; changeCount, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitAsync(System.Guid,System.String,System.Guid,System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitAsync : Guid * string * Guid * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;&#xA;override this.GetCommitAsync : Guid * string * Guid * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;" Usage="gitHttpClientBase.GetCommitAsync (project, commitId, repositoryId, changeCount, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="changeCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="changeCount">The number of changes to include in the result.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync (Guid project, string commitId, string repositoryId, Nullable&lt;int&gt; changeCount = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync(valuetype System.Guid project, string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; changeCount, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitAsync(System.Guid,System.String,System.String,System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitAsync : Guid * string * string * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;&#xA;override this.GetCommitAsync : Guid * string * string * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;" Usage="gitHttpClientBase.GetCommitAsync (project, commitId, repositoryId, changeCount, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="changeCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="changeCount">The number of changes to include in the result.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync (string project, string commitId, Guid repositoryId, Nullable&lt;int&gt; changeCount = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync(string project, string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; changeCount, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitAsync : string * string * Guid * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;&#xA;override this.GetCommitAsync : string * string * Guid * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;" Usage="gitHttpClientBase.GetCommitAsync (project, commitId, repositoryId, changeCount, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="changeCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="changeCount">The number of changes to include in the result.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync (string project, string commitId, string repositoryId, Nullable&lt;int&gt; changeCount = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt; GetCommitAsync(string project, string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; changeCount, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitAsync : string * string * string * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;&#xA;override this.GetCommitAsync : string * string * string * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;" Usage="gitHttpClientBase.GetCommitAsync (project, commitId, repositoryId, changeCount, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="changeCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="commitId">The id of the commit.</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="changeCount">The number of changes to include in the result.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync (Guid repositoryId, Nullable&lt;bool&gt; diffCommonCommit = null, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync(valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; diffCommonCommit, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor, class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitDiffsAsync(System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor,Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitDiffsAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;&#xA;override this.GetCommitDiffsAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;" Usage="gitHttpClientBase.GetCommitDiffsAsync (repositoryId, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="diffCommonCommit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor" />
        <Parameter Name="targetVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="diffCommonCommit">If true, diff between common and target commits. If false, diff between base and target commits.</param>
        <param name="top">Maximum number of changes to return. Defaults to 100.</param>
        <param name="skip">Number of changes to skip</param>
        <param name="baseVersionDescriptor">Descriptor for base commit.</param>
        <param name="targetVersionDescriptor">Descriptor for target commit.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync (string repositoryId, Nullable&lt;bool&gt; diffCommonCommit = null, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync(string repositoryId, valuetype System.Nullable`1&lt;bool&gt; diffCommonCommit, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor, class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitDiffsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor,Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitDiffsAsync : string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;&#xA;override this.GetCommitDiffsAsync : string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;" Usage="gitHttpClientBase.GetCommitDiffsAsync (repositoryId, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="diffCommonCommit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor" />
        <Parameter Name="targetVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="diffCommonCommit">If true, diff between common and target commits. If false, diff between base and target commits.</param>
        <param name="top">Maximum number of changes to return. Defaults to 100.</param>
        <param name="skip">Number of changes to skip</param>
        <param name="baseVersionDescriptor">Descriptor for base commit.</param>
        <param name="targetVersionDescriptor">Descriptor for target commit.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync (Guid project, Guid repositoryId, Nullable&lt;bool&gt; diffCommonCommit = null, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; diffCommonCommit, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor, class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitDiffsAsync(System.Guid,System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor,Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitDiffsAsync : Guid * Guid * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;&#xA;override this.GetCommitDiffsAsync : Guid * Guid * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;" Usage="gitHttpClientBase.GetCommitDiffsAsync (project, repositoryId, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="diffCommonCommit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor" />
        <Parameter Name="targetVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="diffCommonCommit">If true, diff between common and target commits. If false, diff between base and target commits.</param>
        <param name="top">Maximum number of changes to return. Defaults to 100.</param>
        <param name="skip">Number of changes to skip</param>
        <param name="baseVersionDescriptor">Descriptor for base commit.</param>
        <param name="targetVersionDescriptor">Descriptor for target commit.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync (Guid project, string repositoryId, Nullable&lt;bool&gt; diffCommonCommit = null, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync(valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; diffCommonCommit, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor, class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitDiffsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor,Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitDiffsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;&#xA;override this.GetCommitDiffsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;" Usage="gitHttpClientBase.GetCommitDiffsAsync (project, repositoryId, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="diffCommonCommit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor" />
        <Parameter Name="targetVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="diffCommonCommit">If true, diff between common and target commits. If false, diff between base and target commits.</param>
        <param name="top">Maximum number of changes to return. Defaults to 100.</param>
        <param name="skip">Number of changes to skip</param>
        <param name="baseVersionDescriptor">Descriptor for base commit.</param>
        <param name="targetVersionDescriptor">Descriptor for target commit.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync (string project, Guid repositoryId, Nullable&lt;bool&gt; diffCommonCommit = null, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync(string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; diffCommonCommit, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor, class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitDiffsAsync(System.String,System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor,Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitDiffsAsync : string * Guid * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;&#xA;override this.GetCommitDiffsAsync : string * Guid * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;" Usage="gitHttpClientBase.GetCommitDiffsAsync (project, repositoryId, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="diffCommonCommit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor" />
        <Parameter Name="targetVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="diffCommonCommit">If true, diff between common and target commits. If false, diff between base and target commits.</param>
        <param name="top">Maximum number of changes to return. Defaults to 100.</param>
        <param name="skip">Number of changes to skip</param>
        <param name="baseVersionDescriptor">Descriptor for base commit.</param>
        <param name="targetVersionDescriptor">Descriptor for target commit.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync (string project, string repositoryId, Nullable&lt;bool&gt; diffCommonCommit = null, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt; GetCommitDiffsAsync(string project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; diffCommonCommit, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor baseVersionDescriptor, class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor targetVersionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitDiffsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor,Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitDiffsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;&#xA;override this.GetCommitDiffsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor * Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;" Usage="gitHttpClientBase.GetCommitDiffsAsync (project, repositoryId, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="diffCommonCommit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor" />
        <Parameter Name="targetVersionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="diffCommonCommit">If true, diff between common and target commits. If false, diff between base and target commits.</param>
        <param name="top">Maximum number of changes to return. Defaults to 100.</param>
        <param name="skip">Number of changes to skip</param>
        <param name="baseVersionDescriptor">Descriptor for base commit.</param>
        <param name="targetVersionDescriptor">Descriptor for target commit.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync (Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync(valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsAsync(System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsAsync (repositoryId, searchCriteria, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="searchCriteria"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync (string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync(string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsAsync(System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsAsync (repositoryId, searchCriteria, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="searchCriteria"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync (Guid project, Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsAsync(System.Guid,System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsAsync : Guid * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsAsync : Guid * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsAsync (project, repositoryId, searchCriteria, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="searchCriteria"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync (Guid project, string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync(valuetype System.Guid project, string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsAsync(System.Guid,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsAsync (project, repositoryId, searchCriteria, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="searchCriteria"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync (string project, Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync(string project, valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsAsync(System.String,System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsAsync : string * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsAsync : string * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsAsync (project, repositoryId, searchCriteria, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="searchCriteria"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync (string project, string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsAsync(string project, string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsAsync(System.String,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsAsync (project, repositoryId, searchCriteria, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="searchCriteria"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Guid repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeStatuses = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsBatchAsync (searchCriteria, repositoryId, skip, top, includeStatuses, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria">Search options</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of commits to skip.</param>
        <param name="top">Maximum number of commits to return.</param>
        <param name="includeStatuses">True to include additional commit status information.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project matching the search criteria
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, string repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeStatuses = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsBatchAsync (searchCriteria, repositoryId, skip, top, includeStatuses, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria">Search options</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of commits to skip.</param>
        <param name="top">Maximum number of commits to return.</param>
        <param name="includeStatuses">True to include additional commit status information.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project matching the search criteria
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Guid project, Guid repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeStatuses = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Guid,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Guid * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Guid * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsBatchAsync (searchCriteria, project, repositoryId, skip, top, includeStatuses, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria">Search options</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of commits to skip.</param>
        <param name="top">Maximum number of commits to return.</param>
        <param name="includeStatuses">True to include additional commit status information.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project matching the search criteria
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, Guid project, string repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeStatuses = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Guid * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * Guid * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsBatchAsync (searchCriteria, project, repositoryId, skip, top, includeStatuses, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria">Search options</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of commits to skip.</param>
        <param name="top">Maximum number of commits to return.</param>
        <param name="includeStatuses">True to include additional commit status information.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project matching the search criteria
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, string project, Guid repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeStatuses = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsBatchAsync (searchCriteria, project, repositoryId, skip, top, includeStatuses, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria">Search options</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of commits to skip.</param>
        <param name="top">Maximum number of commits to return.</param>
        <param name="includeStatuses">True to include additional commit status information.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project matching the search criteria
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommitsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, string project, string repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeStatuses = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetCommitsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria searchCriteria, string project, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetCommitsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetCommitsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetCommitsBatchAsync (searchCriteria, project, repositoryId, skip, top, includeStatuses, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchCriteria">Search options</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of commits to skip.</param>
        <param name="top">Maximum number of commits to return.</param>
        <param name="includeStatuses">True to include additional commit status information.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git commits for a project matching the search criteria
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetDeletedRepositoriesAsync (Guid project, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetDeletedRepositoriesAsync(valuetype System.Guid project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetDeletedRepositoriesAsync(System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedRepositoriesAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;&#xA;override this.GetDeletedRepositoriesAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;" Usage="gitHttpClientBase.GetDeletedRepositoriesAsync (project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve deleted git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetDeletedRepositoriesAsync (string project, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetDeletedRepositoriesAsync(string project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetDeletedRepositoriesAsync(System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedRepositoriesAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;&#xA;override this.GetDeletedRepositoriesAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;" Usage="gitHttpClientBase.GetDeletedRepositoriesAsync (project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve deleted git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync (Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetFileDiffsAsync(Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;&#xA;override this.GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;" Usage="gitHttpClientBase.GetFileDiffsAsync (fileDiffsCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileDiffsCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileDiffsCriteria">List of file parameters objects</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file diffs for each of the specified files
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync (Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetFileDiffsAsync(Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;&#xA;override this.GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;" Usage="gitHttpClientBase.GetFileDiffsAsync (fileDiffsCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileDiffsCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileDiffsCriteria">List of file parameters objects</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file diffs for each of the specified files
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync (Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetFileDiffsAsync(Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;&#xA;override this.GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;" Usage="gitHttpClientBase.GetFileDiffsAsync (fileDiffsCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileDiffsCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileDiffsCriteria">List of file parameters objects</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file diffs for each of the specified files
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync (Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt; GetFileDiffsAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria fileDiffsCriteria, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetFileDiffsAsync(Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;&#xA;override this.GetFileDiffsAsync : Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;" Usage="gitHttpClientBase.GetFileDiffsAsync (fileDiffsCriteria, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-devops-dotnet-preview">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileDiffsCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileDiffsCriteria">List of file parameters objects</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the file diffs for each of the specified files
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync (Guid repositoryNameOrId, Guid collectionId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync(valuetype System.Guid repositoryNameOrId, valuetype System.Guid collectionId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForksAsync(System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForksAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;&#xA;override this.GetForksAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;" Usage="gitHttpClientBase.GetForksAsync (repositoryNameOrId, collectionId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="collectionId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="collectionId">Team project collection ID.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all forks of a repository in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync (string repositoryNameOrId, Guid collectionId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync(string repositoryNameOrId, valuetype System.Guid collectionId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForksAsync(System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForksAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;&#xA;override this.GetForksAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;" Usage="gitHttpClientBase.GetForksAsync (repositoryNameOrId, collectionId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="collectionId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="collectionId">Team project collection ID.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all forks of a repository in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync (Guid project, Guid repositoryNameOrId, Guid collectionId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync(valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, valuetype System.Guid collectionId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForksAsync(System.Guid,System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForksAsync : Guid * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;&#xA;override this.GetForksAsync : Guid * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;" Usage="gitHttpClientBase.GetForksAsync (project, repositoryNameOrId, collectionId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="collectionId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="collectionId">Team project collection ID.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all forks of a repository in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync (Guid project, string repositoryNameOrId, Guid collectionId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync(valuetype System.Guid project, string repositoryNameOrId, valuetype System.Guid collectionId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForksAsync(System.Guid,System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForksAsync : Guid * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;&#xA;override this.GetForksAsync : Guid * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;" Usage="gitHttpClientBase.GetForksAsync (project, repositoryNameOrId, collectionId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="collectionId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="collectionId">Team project collection ID.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all forks of a repository in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync (string project, Guid repositoryNameOrId, Guid collectionId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync(string project, valuetype System.Guid repositoryNameOrId, valuetype System.Guid collectionId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForksAsync(System.String,System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForksAsync : string * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;&#xA;override this.GetForksAsync : string * Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;" Usage="gitHttpClientBase.GetForksAsync (project, repositoryNameOrId, collectionId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="collectionId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="collectionId">Team project collection ID.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all forks of a repository in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync (string project, string repositoryNameOrId, Guid collectionId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt; GetForksAsync(string project, string repositoryNameOrId, valuetype System.Guid collectionId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForksAsync(System.String,System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForksAsync : string * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;&#xA;override this.GetForksAsync : string * string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;" Usage="gitHttpClientBase.GetForksAsync (project, repositoryNameOrId, collectionId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="collectionId" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="collectionId">Team project collection ID.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all forks of a repository in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync (Guid repositoryNameOrId, int forkSyncOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync(valuetype System.Guid repositoryNameOrId, int32 forkSyncOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestAsync(System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestAsync : Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.GetForkSyncRequestAsync : Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.GetForkSyncRequestAsync (repositoryNameOrId, forkSyncOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="forkSyncOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="forkSyncOperationId">OperationId of the sync request.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific fork sync operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync (string repositoryNameOrId, int forkSyncOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync(string repositoryNameOrId, int32 forkSyncOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestAsync(System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestAsync : string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.GetForkSyncRequestAsync : string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.GetForkSyncRequestAsync (repositoryNameOrId, forkSyncOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="forkSyncOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="forkSyncOperationId">OperationId of the sync request.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific fork sync operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync (Guid project, Guid repositoryNameOrId, int forkSyncOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync(valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, int32 forkSyncOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestAsync : Guid * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.GetForkSyncRequestAsync : Guid * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.GetForkSyncRequestAsync (project, repositoryNameOrId, forkSyncOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="forkSyncOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="forkSyncOperationId">OperationId of the sync request.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific fork sync operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync (Guid project, string repositoryNameOrId, int forkSyncOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync(valuetype System.Guid project, string repositoryNameOrId, int32 forkSyncOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestAsync : Guid * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.GetForkSyncRequestAsync : Guid * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.GetForkSyncRequestAsync (project, repositoryNameOrId, forkSyncOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="forkSyncOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="forkSyncOperationId">OperationId of the sync request.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific fork sync operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync (string project, Guid repositoryNameOrId, int forkSyncOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync(string project, valuetype System.Guid repositoryNameOrId, int32 forkSyncOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestAsync : string * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.GetForkSyncRequestAsync : string * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.GetForkSyncRequestAsync (project, repositoryNameOrId, forkSyncOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="forkSyncOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="forkSyncOperationId">OperationId of the sync request.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific fork sync operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync (string project, string repositoryNameOrId, int forkSyncOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt; GetForkSyncRequestAsync(string project, string repositoryNameOrId, int32 forkSyncOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestAsync(System.String,System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestAsync : string * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&#xA;override this.GetForkSyncRequestAsync : string * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;" Usage="gitHttpClientBase.GetForkSyncRequestAsync (project, repositoryNameOrId, forkSyncOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="forkSyncOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="forkSyncOperationId">OperationId of the sync request.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific fork sync operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync (Guid repositoryNameOrId, Nullable&lt;bool&gt; includeAbandoned = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync(valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestsAsync(System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestsAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;&#xA;override this.GetForkSyncRequestsAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;" Usage="gitHttpClientBase.GetForkSyncRequestsAsync (repositoryNameOrId, includeAbandoned, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned requests.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all requested fork sync operations on this repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync (string repositoryNameOrId, Nullable&lt;bool&gt; includeAbandoned = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync(string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestsAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;&#xA;override this.GetForkSyncRequestsAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;" Usage="gitHttpClientBase.GetForkSyncRequestsAsync (repositoryNameOrId, includeAbandoned, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned requests.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all requested fork sync operations on this repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync (Guid project, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeAbandoned = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync(valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestsAsync(System.Guid,System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestsAsync : Guid * Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;&#xA;override this.GetForkSyncRequestsAsync : Guid * Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;" Usage="gitHttpClientBase.GetForkSyncRequestsAsync (project, repositoryNameOrId, includeAbandoned, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned requests.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all requested fork sync operations on this repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync (Guid project, string repositoryNameOrId, Nullable&lt;bool&gt; includeAbandoned = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync(valuetype System.Guid project, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;&#xA;override this.GetForkSyncRequestsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;" Usage="gitHttpClientBase.GetForkSyncRequestsAsync (project, repositoryNameOrId, includeAbandoned, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned requests.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all requested fork sync operations on this repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync (string project, Guid repositoryNameOrId, Nullable&lt;bool&gt; includeAbandoned = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync(string project, valuetype System.Guid repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestsAsync(System.String,System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestsAsync : string * Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;&#xA;override this.GetForkSyncRequestsAsync : string * Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;" Usage="gitHttpClientBase.GetForkSyncRequestsAsync (project, repositoryNameOrId, includeAbandoned, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned requests.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all requested fork sync operations on this repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForkSyncRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync (string project, string repositoryNameOrId, Nullable&lt;bool&gt; includeAbandoned = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt; GetForkSyncRequestsAsync(string project, string repositoryNameOrId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetForkSyncRequestsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetForkSyncRequestsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;&#xA;override this.GetForkSyncRequestsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;" Usage="gitHttpClientBase.GetForkSyncRequestsAsync (project, repositoryNameOrId, includeAbandoned, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned requests.</param>
        <param name="includeLinks">True to include links.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all requested fork sync operations on this repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync (Guid project, Guid repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetImportRequestAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetImportRequestAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.GetImportRequestAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.GetImportRequestAsync (project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync (Guid project, string repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync(valuetype System.Guid project, string repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetImportRequestAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetImportRequestAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.GetImportRequestAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.GetImportRequestAsync (project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync (string project, Guid repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync(string project, valuetype System.Guid repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetImportRequestAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetImportRequestAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.GetImportRequestAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.GetImportRequestAsync (project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync (string project, string repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; GetImportRequestAsync(string project, string repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetImportRequestAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetImportRequestAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.GetImportRequestAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.GetImportRequestAsync (project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a particular import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt; GetItemAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;" Usage="gitHttpClientBase.GetItemAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemContentAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemContentAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemContentAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemContentAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemContentAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync (Guid repositoryId, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Nullable&lt;bool&gt; includeLinks = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync(valuetype System.Guid repositoryId, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, valuetype System.Nullable`1&lt;bool&gt; includeLinks, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsAsync(System.Guid,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsAsync : Guid * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&#xA;override this.GetItemsAsync : Guid * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;" Usage="gitHttpClientBase.GetItemsAsync (repositoryId, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="includeLinks">Set to true to include links to items.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync (string repositoryId, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Nullable&lt;bool&gt; includeLinks = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync(string repositoryId, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, valuetype System.Nullable`1&lt;bool&gt; includeLinks, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsAsync(System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsAsync : string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&#xA;override this.GetItemsAsync : string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;" Usage="gitHttpClientBase.GetItemsAsync (repositoryId, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="includeLinks">Set to true to include links to items.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync (Guid project, Guid repositoryId, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Nullable&lt;bool&gt; includeLinks = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, valuetype System.Nullable`1&lt;bool&gt; includeLinks, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsAsync(System.Guid,System.Guid,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsAsync : Guid * Guid * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&#xA;override this.GetItemsAsync : Guid * Guid * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;" Usage="gitHttpClientBase.GetItemsAsync (project, repositoryId, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="includeLinks">Set to true to include links to items.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync (Guid project, string repositoryId, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Nullable&lt;bool&gt; includeLinks = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync(valuetype System.Guid project, string repositoryId, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, valuetype System.Nullable`1&lt;bool&gt; includeLinks, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&#xA;override this.GetItemsAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;" Usage="gitHttpClientBase.GetItemsAsync (project, repositoryId, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="includeLinks">Set to true to include links to items.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync (string project, Guid repositoryId, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Nullable&lt;bool&gt; includeLinks = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync(string project, valuetype System.Guid repositoryId, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, valuetype System.Nullable`1&lt;bool&gt; includeLinks, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsAsync(System.String,System.Guid,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsAsync : string * Guid * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&#xA;override this.GetItemsAsync : string * Guid * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;" Usage="gitHttpClientBase.GetItemsAsync (project, repositoryId, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="includeLinks">Set to true to include links to items.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync (string project, string repositoryId, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Nullable&lt;bool&gt; includeLinks = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt; GetItemsAsync(string project, string repositoryId, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, valuetype System.Nullable`1&lt;bool&gt; includeLinks, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&#xA;override this.GetItemsAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;" Usage="gitHttpClientBase.GetItemsAsync (project, repositoryId, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="includeLinks">Set to true to include links to items.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;&#xA;override this.GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;" Usage="gitHttpClientBase.GetItemsBatchAsync (requestData, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestData">Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;&#xA;override this.GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;" Usage="gitHttpClientBase.GetItemsBatchAsync (requestData, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestData">Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;&#xA;override this.GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;" Usage="gitHttpClientBase.GetItemsBatchAsync (requestData, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestData">Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;&#xA;override this.GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;" Usage="gitHttpClientBase.GetItemsBatchAsync (requestData, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestData">Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;&#xA;override this.GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;" Usage="gitHttpClientBase.GetItemsBatchAsync (requestData, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestData">Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt; GetItemsBatchAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData requestData, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemsBatchAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;&#xA;override this.GetItemsBatchAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;" Usage="gitHttpClientBase.GetItemsBatchAsync (requestData, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestData">Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemTextAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemTextAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemTextAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemTextAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemTextAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The Id of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : Guid * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (Guid project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(valuetype System.Guid project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.Guid,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : Guid * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, Guid repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, valuetype System.Guid repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.String,System.Guid,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : string * Guid * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetItemZipAsync (string project, string repositoryId, string path, string scopePath = null, Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel = null, Nullable&lt;bool&gt; includeContentMetadata = null, Nullable&lt;bool&gt; latestProcessedChange = null, Nullable&lt;bool&gt; download = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor = null, Nullable&lt;bool&gt; includeContent = null, Nullable&lt;bool&gt; resolveLfs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetItemZipAsync(string project, string repositoryId, string path, string scopePath, valuetype System.Nullable`1&lt;valuetype Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; recursionLevel, valuetype System.Nullable`1&lt;bool&gt; includeContentMetadata, valuetype System.Nullable`1&lt;bool&gt; latestProcessedChange, valuetype System.Nullable`1&lt;bool&gt; download, class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor versionDescriptor, valuetype System.Nullable`1&lt;bool&gt; includeContent, valuetype System.Nullable`1&lt;bool&gt; resolveLfs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetItemZipAsync(System.String,System.String,System.String,System.String,System.Nullable{Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetItemZipAsync : string * string * string * string * Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetItemZipAsync (project, repositoryId, path, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="scopePath" Type="System.String" />
        <Parameter Name="recursionLevel" Type="System.Nullable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType&gt;" />
        <Parameter Name="includeContentMetadata" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestProcessedChange" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="download" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="versionDescriptor" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor" />
        <Parameter Name="includeContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="resolveLfs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="path">The item path.</param>
        <param name="scopePath">The path scope.  The default is null.</param>
        <param name="recursionLevel">The recursion level of this request. The default is 'none', no recursion.</param>
        <param name="includeContentMetadata">Set to true to include content metadata.  Default is false.</param>
        <param name="latestProcessedChange">Set to true to include the lastest changes.  Default is false.</param>
        <param name="download">Set to true to download the response as a file.  Default is false.</param>
        <param name="versionDescriptor">Version descriptor.  Default is null.</param>
        <param name="includeContent">Set to true to include item content when requesting json.  Default is false.</param>
        <param name="resolveLfs">Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLikesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync (Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetLikesAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetLikesAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;&#xA;override this.GetLikesAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;" Usage="gitHttpClientBase.GetLikesAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get likes for a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLikesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync (string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync(string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetLikesAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetLikesAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;&#xA;override this.GetLikesAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;" Usage="gitHttpClientBase.GetLikesAsync (repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get likes for a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLikesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetLikesAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetLikesAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;&#xA;override this.GetLikesAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;" Usage="gitHttpClientBase.GetLikesAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get likes for a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLikesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync (Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetLikesAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetLikesAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;&#xA;override this.GetLikesAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;" Usage="gitHttpClientBase.GetLikesAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get likes for a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLikesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync (string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetLikesAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetLikesAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;&#xA;override this.GetLikesAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;" Usage="gitHttpClientBase.GetLikesAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get likes for a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLikesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync (string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt; GetLikesAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetLikesAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetLikesAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;&#xA;override this.GetLikesAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;" Usage="gitHttpClientBase.GetLikesAsync (project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.IdentityRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">The ID of the thread that contains the comment.</param>
        <param name="commentId">The ID of the comment.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get likes for a comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeBasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync (Guid repositoryNameOrId, string commitId, string otherCommitId, Nullable&lt;Guid&gt; otherCollectionId = null, Nullable&lt;Guid&gt; otherRepositoryId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync(valuetype System.Guid repositoryNameOrId, string commitId, string otherCommitId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherCollectionId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherRepositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeBasesAsync(System.Guid,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeBasesAsync : Guid * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetMergeBasesAsync : Guid * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetMergeBasesAsync (repositoryNameOrId, commitId, otherCommitId, otherCollectionId, otherRepositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="otherCommitId" Type="System.String" />
        <Parameter Name="otherCollectionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="otherRepositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">ID or name of the local repository.</param>
        <param name="commitId">First commit, usually the tip of the target branch of the potential merge.</param>
        <param name="otherCommitId">Other commit, usually the tip of the source branch of the potential merge.</param>
        <param name="otherCollectionId">The collection ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="otherRepositoryId">The repository ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the merge bases of two commits, optionally across forks. If <paramref name="otherRepositoryId" /> is not specified, the merge bases will only be calculated within the context of the local <paramref name="repositoryNameOrId" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeBasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync (string repositoryNameOrId, string commitId, string otherCommitId, Nullable&lt;Guid&gt; otherCollectionId = null, Nullable&lt;Guid&gt; otherRepositoryId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync(string repositoryNameOrId, string commitId, string otherCommitId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherCollectionId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherRepositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeBasesAsync(System.String,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeBasesAsync : string * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetMergeBasesAsync : string * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetMergeBasesAsync (repositoryNameOrId, commitId, otherCommitId, otherCollectionId, otherRepositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="otherCommitId" Type="System.String" />
        <Parameter Name="otherCollectionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="otherRepositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryNameOrId">ID or name of the local repository.</param>
        <param name="commitId">First commit, usually the tip of the target branch of the potential merge.</param>
        <param name="otherCommitId">Other commit, usually the tip of the source branch of the potential merge.</param>
        <param name="otherCollectionId">The collection ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="otherRepositoryId">The repository ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the merge bases of two commits, optionally across forks. If <paramref name="otherRepositoryId" /> is not specified, the merge bases will only be calculated within the context of the local <paramref name="repositoryNameOrId" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeBasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync (Guid project, Guid repositoryNameOrId, string commitId, string otherCommitId, Nullable&lt;Guid&gt; otherCollectionId = null, Nullable&lt;Guid&gt; otherRepositoryId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync(valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, string commitId, string otherCommitId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherCollectionId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherRepositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeBasesAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeBasesAsync : Guid * Guid * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetMergeBasesAsync : Guid * Guid * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetMergeBasesAsync (project, repositoryNameOrId, commitId, otherCommitId, otherCollectionId, otherRepositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="otherCommitId" Type="System.String" />
        <Parameter Name="otherCollectionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="otherRepositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">ID or name of the local repository.</param>
        <param name="commitId">First commit, usually the tip of the target branch of the potential merge.</param>
        <param name="otherCommitId">Other commit, usually the tip of the source branch of the potential merge.</param>
        <param name="otherCollectionId">The collection ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="otherRepositoryId">The repository ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the merge bases of two commits, optionally across forks. If <paramref name="otherRepositoryId" /> is not specified, the merge bases will only be calculated within the context of the local <paramref name="repositoryNameOrId" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeBasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync (Guid project, string repositoryNameOrId, string commitId, string otherCommitId, Nullable&lt;Guid&gt; otherCollectionId = null, Nullable&lt;Guid&gt; otherRepositoryId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync(valuetype System.Guid project, string repositoryNameOrId, string commitId, string otherCommitId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherCollectionId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherRepositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeBasesAsync(System.Guid,System.String,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeBasesAsync : Guid * string * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetMergeBasesAsync : Guid * string * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetMergeBasesAsync (project, repositoryNameOrId, commitId, otherCommitId, otherCollectionId, otherRepositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="otherCommitId" Type="System.String" />
        <Parameter Name="otherCollectionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="otherRepositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">ID or name of the local repository.</param>
        <param name="commitId">First commit, usually the tip of the target branch of the potential merge.</param>
        <param name="otherCommitId">Other commit, usually the tip of the source branch of the potential merge.</param>
        <param name="otherCollectionId">The collection ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="otherRepositoryId">The repository ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the merge bases of two commits, optionally across forks. If <paramref name="otherRepositoryId" /> is not specified, the merge bases will only be calculated within the context of the local <paramref name="repositoryNameOrId" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeBasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync (string project, Guid repositoryNameOrId, string commitId, string otherCommitId, Nullable&lt;Guid&gt; otherCollectionId = null, Nullable&lt;Guid&gt; otherRepositoryId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync(string project, valuetype System.Guid repositoryNameOrId, string commitId, string otherCommitId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherCollectionId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherRepositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeBasesAsync(System.String,System.Guid,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeBasesAsync : string * Guid * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetMergeBasesAsync : string * Guid * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetMergeBasesAsync (project, repositoryNameOrId, commitId, otherCommitId, otherCollectionId, otherRepositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="otherCommitId" Type="System.String" />
        <Parameter Name="otherCollectionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="otherRepositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">ID or name of the local repository.</param>
        <param name="commitId">First commit, usually the tip of the target branch of the potential merge.</param>
        <param name="otherCommitId">Other commit, usually the tip of the source branch of the potential merge.</param>
        <param name="otherCollectionId">The collection ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="otherRepositoryId">The repository ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the merge bases of two commits, optionally across forks. If <paramref name="otherRepositoryId" /> is not specified, the merge bases will only be calculated within the context of the local <paramref name="repositoryNameOrId" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeBasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync (string project, string repositoryNameOrId, string commitId, string otherCommitId, Nullable&lt;Guid&gt; otherCollectionId = null, Nullable&lt;Guid&gt; otherRepositoryId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetMergeBasesAsync(string project, string repositoryNameOrId, string commitId, string otherCommitId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherCollectionId, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; otherRepositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeBasesAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeBasesAsync : string * string * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetMergeBasesAsync : string * string * string * string * Nullable&lt;Guid&gt; * Nullable&lt;Guid&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetMergeBasesAsync (project, repositoryNameOrId, commitId, otherCommitId, otherCollectionId, otherRepositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="otherCommitId" Type="System.String" />
        <Parameter Name="otherCollectionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="otherRepositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">ID or name of the local repository.</param>
        <param name="commitId">First commit, usually the tip of the target branch of the potential merge.</param>
        <param name="otherCommitId">Other commit, usually the tip of the source branch of the potential merge.</param>
        <param name="otherCollectionId">The collection ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="otherRepositoryId">The repository ID where <paramref name="otherCommitId" /> lives.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Find the merge bases of two commits, optionally across forks. If <paramref name="otherRepositoryId" /> is not specified, the merge bases will only be calculated within the context of the local <paramref name="repositoryNameOrId" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync (Guid project, Guid repositoryNameOrId, int mergeOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync(valuetype System.Guid project, valuetype System.Guid repositoryNameOrId, int32 mergeOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeRequestAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeRequestAsync : Guid * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.GetMergeRequestAsync : Guid * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.GetMergeRequestAsync (project, repositoryNameOrId, mergeOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="mergeOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="mergeOperationId">OperationId of the merge request.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific merge operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync (Guid project, string repositoryNameOrId, int mergeOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync(valuetype System.Guid project, string repositoryNameOrId, int32 mergeOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeRequestAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeRequestAsync : Guid * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.GetMergeRequestAsync : Guid * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.GetMergeRequestAsync (project, repositoryNameOrId, mergeOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="mergeOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="mergeOperationId">OperationId of the merge request.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific merge operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync (string project, Guid repositoryNameOrId, int mergeOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync(string project, valuetype System.Guid repositoryNameOrId, int32 mergeOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeRequestAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeRequestAsync : string * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.GetMergeRequestAsync : string * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.GetMergeRequestAsync (project, repositoryNameOrId, mergeOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.Guid" />
        <Parameter Name="mergeOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="mergeOperationId">OperationId of the merge request.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific merge operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMergeRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync (string project, string repositoryNameOrId, int mergeOperationId, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt; GetMergeRequestAsync(string project, string repositoryNameOrId, int32 mergeOperationId, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetMergeRequestAsync(System.String,System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetMergeRequestAsync : string * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;&#xA;override this.GetMergeRequestAsync : string * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;" Usage="gitHttpClientBase.GetMergeRequestAsync (project, repositoryNameOrId, mergeOperationId, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryNameOrId" Type="System.String" />
        <Parameter Name="mergeOperationId" Type="System.Int32" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryNameOrId">The name or ID of the repository.</param>
        <param name="mergeOperationId">OperationId of the merge request.</param>
        <param name="includeLinks">True to include links</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get a specific merge operation's details.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolicyConfigurationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt; GetPolicyConfigurationsAsync (Guid project, Nullable&lt;Guid&gt; repositoryId = null, string refName = null, Nullable&lt;Guid&gt; policyType = null, Nullable&lt;int&gt; top = null, string continuationToken = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt; GetPolicyConfigurationsAsync(valuetype System.Guid project, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; repositoryId, string refName, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; policyType, valuetype System.Nullable`1&lt;int32&gt; top, string continuationToken, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPolicyConfigurationsAsync(System.Guid,System.Nullable{System.Guid},System.String,System.Nullable{System.Guid},System.Nullable{System.Int32},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPolicyConfigurationsAsync : Guid * Nullable&lt;Guid&gt; * string * Nullable&lt;Guid&gt; * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt;&#xA;override this.GetPolicyConfigurationsAsync : Guid * Nullable&lt;Guid&gt; * string * Nullable&lt;Guid&gt; * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt;" Usage="gitHttpClientBase.GetPolicyConfigurationsAsync (project, repositoryId, refName, policyType, top, continuationToken, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="policyType" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository id.</param>
        <param name="refName">The fully-qualified Git ref name (e.g. refs/heads/master).</param>
        <param name="policyType">The policy type filter.</param>
        <param name="top">Maximum number of policies to return.</param>
        <param name="continuationToken">Pass a policy configuration ID to fetch the next page of results, up to top number of results, for this endpoint.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of policy configurations by a given set of scope/filtering criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolicyConfigurationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt; GetPolicyConfigurationsAsync (string project, Nullable&lt;Guid&gt; repositoryId = null, string refName = null, Nullable&lt;Guid&gt; policyType = null, Nullable&lt;int&gt; top = null, string continuationToken = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt; GetPolicyConfigurationsAsync(string project, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; repositoryId, string refName, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; policyType, valuetype System.Nullable`1&lt;int32&gt; top, string continuationToken, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPolicyConfigurationsAsync(System.String,System.Nullable{System.Guid},System.String,System.Nullable{System.Guid},System.Nullable{System.Int32},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPolicyConfigurationsAsync : string * Nullable&lt;Guid&gt; * string * Nullable&lt;Guid&gt; * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt;&#xA;override this.GetPolicyConfigurationsAsync : string * Nullable&lt;Guid&gt; * string * Nullable&lt;Guid&gt; * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt;" Usage="gitHttpClientBase.GetPolicyConfigurationsAsync (project, repositoryId, refName, policyType, top, continuationToken, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="policyType" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository id.</param>
        <param name="refName">The fully-qualified Git ref name (e.g. refs/heads/master).</param>
        <param name="policyType">The policy type filter.</param>
        <param name="top">Maximum number of policies to return.</param>
        <param name="continuationToken">Pass a policy configuration ID to fetch the next page of results, up to top number of results, for this endpoint.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of policy configurations by a given set of scope/filtering criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync (Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeCommits = null, Nullable&lt;bool&gt; includeWorkItemRefs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync(valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeWorkItemRefs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestAsync(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestAsync (repositoryId, pullRequestId, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeWorkItemRefs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">Not used.</param>
        <param name="top">Not used.</param>
        <param name="includeCommits">If true, the pull request will be returned with the associated commits.</param>
        <param name="includeWorkItemRefs">If true, the pull request will be returned with the associated work item references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync (string repositoryId, int pullRequestId, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeCommits = null, Nullable&lt;bool&gt; includeWorkItemRefs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync(string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeWorkItemRefs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestAsync (repositoryId, pullRequestId, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeWorkItemRefs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">Not used.</param>
        <param name="top">Not used.</param>
        <param name="includeCommits">If true, the pull request will be returned with the associated commits.</param>
        <param name="includeWorkItemRefs">If true, the pull request will be returned with the associated work item references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync (Guid project, Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeCommits = null, Nullable&lt;bool&gt; includeWorkItemRefs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeWorkItemRefs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestAsync (project, repositoryId, pullRequestId, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeWorkItemRefs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">Not used.</param>
        <param name="top">Not used.</param>
        <param name="includeCommits">If true, the pull request will be returned with the associated commits.</param>
        <param name="includeWorkItemRefs">If true, the pull request will be returned with the associated work item references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync (Guid project, string repositoryId, int pullRequestId, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeCommits = null, Nullable&lt;bool&gt; includeWorkItemRefs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeWorkItemRefs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestAsync (project, repositoryId, pullRequestId, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeWorkItemRefs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">Not used.</param>
        <param name="top">Not used.</param>
        <param name="includeCommits">If true, the pull request will be returned with the associated commits.</param>
        <param name="includeWorkItemRefs">If true, the pull request will be returned with the associated work item references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync (string project, Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeCommits = null, Nullable&lt;bool&gt; includeWorkItemRefs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeWorkItemRefs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestAsync (project, repositoryId, pullRequestId, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeWorkItemRefs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">Not used.</param>
        <param name="top">Not used.</param>
        <param name="includeCommits">If true, the pull request will be returned with the associated commits.</param>
        <param name="includeWorkItemRefs">If true, the pull request will be returned with the associated work item references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync (string project, string repositoryId, int pullRequestId, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeCommits = null, Nullable&lt;bool&gt; includeWorkItemRefs = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestAsync(string project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeWorkItemRefs, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestAsync (project, repositoryId, pullRequestId, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeWorkItemRefs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">Not used.</param>
        <param name="top">Not used.</param>
        <param name="includeCommits">If true, the pull request will be returned with the associated commits.</param>
        <param name="includeWorkItemRefs">If true, the pull request will be returned with the associated work item references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestByIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestByIdAsync (int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestByIdAsync(int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestByIdAsync(System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestByIdAsync : int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestByIdAsync : int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestByIdAsync (pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestByIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestByIdAsync (Guid project, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestByIdAsync(valuetype System.Guid project, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestByIdAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestByIdAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestByIdAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestByIdAsync (project, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestByIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestByIdAsync (string project, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; GetPullRequestByIdAsync(string project, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestByIdAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestByIdAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.GetPullRequestByIdAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.GetPullRequestByIdAsync (project, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="pullRequestId">The ID of the pull request to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync (Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestCommitsAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestCommitsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestCommitsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestCommitsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync (string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestCommitsAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestCommitsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestCommitsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestCommitsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestCommitsAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestCommitsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestCommitsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestCommitsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync (Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestCommitsAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestCommitsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestCommitsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestCommitsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync (string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestCommitsAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestCommitsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestCommitsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestCommitsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync (string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestCommitsAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestCommitsAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestCommitsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestCommitsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestCommitsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync (Guid repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.GetPullRequestConflictAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.GetPullRequestConflictAsync (repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve one conflict for a pull request by ID
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync (string repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync(string repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.GetPullRequestConflictAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.GetPullRequestConflictAsync (repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve one conflict for a pull request by ID
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync (Guid project, Guid repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.GetPullRequestConflictAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.GetPullRequestConflictAsync (project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve one conflict for a pull request by ID
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync (Guid project, string repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.GetPullRequestConflictAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.GetPullRequestConflictAsync (project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve one conflict for a pull request by ID
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync (string project, Guid repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.GetPullRequestConflictAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.GetPullRequestConflictAsync (project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve one conflict for a pull request by ID
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync (string project, string repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; GetPullRequestConflictAsync(string project, string repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestConflictAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.GetPullRequestConflictAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.GetPullRequestConflictAsync (project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve one conflict for a pull request by ID
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeObsolete = null, Nullable&lt;bool&gt; excludeResolved = null, Nullable&lt;bool&gt; onlyResolved = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, valuetype System.Nullable`1&lt;bool&gt; excludeResolved, valuetype System.Nullable`1&lt;bool&gt; onlyResolved, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictsAsync(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetPullRequestConflictsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestConflictsAsync (repositoryId, pullRequestId, skip, top, includeObsolete, excludeResolved, onlyResolved, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="onlyResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="includeObsolete"></param>
        <param name="excludeResolved"></param>
        <param name="onlyResolved"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all conflicts for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (string repositoryId, int pullRequestId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeObsolete = null, Nullable&lt;bool&gt; excludeResolved = null, Nullable&lt;bool&gt; onlyResolved = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, valuetype System.Nullable`1&lt;bool&gt; excludeResolved, valuetype System.Nullable`1&lt;bool&gt; onlyResolved, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictsAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetPullRequestConflictsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestConflictsAsync (repositoryId, pullRequestId, skip, top, includeObsolete, excludeResolved, onlyResolved, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="onlyResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="includeObsolete"></param>
        <param name="excludeResolved"></param>
        <param name="onlyResolved"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all conflicts for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (Guid project, Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeObsolete = null, Nullable&lt;bool&gt; excludeResolved = null, Nullable&lt;bool&gt; onlyResolved = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, valuetype System.Nullable`1&lt;bool&gt; excludeResolved, valuetype System.Nullable`1&lt;bool&gt; onlyResolved, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictsAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetPullRequestConflictsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, excludeResolved, onlyResolved, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="onlyResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="includeObsolete"></param>
        <param name="excludeResolved"></param>
        <param name="onlyResolved"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all conflicts for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (Guid project, string repositoryId, int pullRequestId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeObsolete = null, Nullable&lt;bool&gt; excludeResolved = null, Nullable&lt;bool&gt; onlyResolved = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, valuetype System.Nullable`1&lt;bool&gt; excludeResolved, valuetype System.Nullable`1&lt;bool&gt; onlyResolved, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictsAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetPullRequestConflictsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, excludeResolved, onlyResolved, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="onlyResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="includeObsolete"></param>
        <param name="excludeResolved"></param>
        <param name="onlyResolved"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all conflicts for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (string project, Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeObsolete = null, Nullable&lt;bool&gt; excludeResolved = null, Nullable&lt;bool&gt; onlyResolved = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, valuetype System.Nullable`1&lt;bool&gt; excludeResolved, valuetype System.Nullable`1&lt;bool&gt; onlyResolved, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictsAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetPullRequestConflictsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, excludeResolved, onlyResolved, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="onlyResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="includeObsolete"></param>
        <param name="excludeResolved"></param>
        <param name="onlyResolved"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all conflicts for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync (string project, string repositoryId, int pullRequestId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Nullable&lt;bool&gt; includeObsolete = null, Nullable&lt;bool&gt; excludeResolved = null, Nullable&lt;bool&gt; onlyResolved = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt; GetPullRequestConflictsAsync(string project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; includeObsolete, valuetype System.Nullable`1&lt;bool&gt; excludeResolved, valuetype System.Nullable`1&lt;bool&gt; onlyResolved, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestConflictsAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetPullRequestConflictsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestConflictsAsync (project, repositoryId, pullRequestId, skip, top, includeObsolete, excludeResolved, onlyResolved, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeObsolete" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="onlyResolved" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="skip"></param>
        <param name="top"></param>
        <param name="includeObsolete"></param>
        <param name="excludeResolved"></param>
        <param name="onlyResolved"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all conflicts for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync (Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&#xA;override this.GetPullRequestIterationAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;" Usage="gitHttpClientBase.GetPullRequestIterationAsync (repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration to return.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specified iteration for a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync (string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync(string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&#xA;override this.GetPullRequestIterationAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;" Usage="gitHttpClientBase.GetPullRequestIterationAsync (repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration to return.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specified iteration for a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync (Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&#xA;override this.GetPullRequestIterationAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;" Usage="gitHttpClientBase.GetPullRequestIterationAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration to return.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specified iteration for a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync (Guid project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&#xA;override this.GetPullRequestIterationAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;" Usage="gitHttpClientBase.GetPullRequestIterationAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration to return.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specified iteration for a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync (string project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&#xA;override this.GetPullRequestIterationAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;" Usage="gitHttpClientBase.GetPullRequestIterationAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration to return.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specified iteration for a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync (string project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt; GetPullRequestIterationAsync(string project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&#xA;override this.GetPullRequestIterationAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;" Usage="gitHttpClientBase.GetPullRequestIterationAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration to return.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specified iteration for a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync (Guid repositoryId, int pullRequestId, int iterationId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; compareTo = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; compareTo, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationChangesAsync(System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationChangesAsync : Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;&#xA;override this.GetPullRequestIterationChangesAsync : Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;" Usage="gitHttpClientBase.GetPullRequestIterationChangesAsync (repositoryId, pullRequestId, iterationId, top, skip, compareTo, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="compareTo" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration. <br /> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
        <param name="top">Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
        <param name="skip">Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
        <param name="compareTo">ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the changes made in a pull request between two iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync (string repositoryId, int pullRequestId, int iterationId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; compareTo = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync(string repositoryId, int32 pullRequestId, int32 iterationId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; compareTo, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationChangesAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationChangesAsync : string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;&#xA;override this.GetPullRequestIterationChangesAsync : string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;" Usage="gitHttpClientBase.GetPullRequestIterationChangesAsync (repositoryId, pullRequestId, iterationId, top, skip, compareTo, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="compareTo" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration. <br /> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
        <param name="top">Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
        <param name="skip">Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
        <param name="compareTo">ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the changes made in a pull request between two iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync (Guid project, Guid repositoryId, int pullRequestId, int iterationId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; compareTo = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; compareTo, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationChangesAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationChangesAsync : Guid * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;&#xA;override this.GetPullRequestIterationChangesAsync : Guid * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;" Usage="gitHttpClientBase.GetPullRequestIterationChangesAsync (project, repositoryId, pullRequestId, iterationId, top, skip, compareTo, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="compareTo" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration. <br /> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
        <param name="top">Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
        <param name="skip">Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
        <param name="compareTo">ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the changes made in a pull request between two iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync (Guid project, string repositoryId, int pullRequestId, int iterationId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; compareTo = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; compareTo, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationChangesAsync(System.Guid,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationChangesAsync : Guid * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;&#xA;override this.GetPullRequestIterationChangesAsync : Guid * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;" Usage="gitHttpClientBase.GetPullRequestIterationChangesAsync (project, repositoryId, pullRequestId, iterationId, top, skip, compareTo, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="compareTo" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration. <br /> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
        <param name="top">Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
        <param name="skip">Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
        <param name="compareTo">ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the changes made in a pull request between two iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync (string project, Guid repositoryId, int pullRequestId, int iterationId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; compareTo = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; compareTo, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationChangesAsync(System.String,System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationChangesAsync : string * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;&#xA;override this.GetPullRequestIterationChangesAsync : string * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;" Usage="gitHttpClientBase.GetPullRequestIterationChangesAsync (project, repositoryId, pullRequestId, iterationId, top, skip, compareTo, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="compareTo" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration. <br /> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
        <param name="top">Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
        <param name="skip">Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
        <param name="compareTo">ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the changes made in a pull request between two iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationChangesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync (string project, string repositoryId, int pullRequestId, int iterationId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; compareTo = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt; GetPullRequestIterationChangesAsync(string project, string repositoryId, int32 pullRequestId, int32 iterationId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; compareTo, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationChangesAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationChangesAsync : string * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;&#xA;override this.GetPullRequestIterationChangesAsync : string * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;" Usage="gitHttpClientBase.GetPullRequestIterationChangesAsync (project, repositoryId, pullRequestId, iterationId, top, skip, compareTo, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="compareTo" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration. <br /> Iteration IDs are zero-based with zero indicating the common commit between the source and target branches. Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch.</param>
        <param name="top">Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.</param>
        <param name="skip">Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.</param>
        <param name="compareTo">ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the changes made in a pull request between two iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync (Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationCommitsAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationCommitsAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestIterationCommitsAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationCommitsAsync (repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the iteration from which to get the commits.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified iteration of a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync (string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync(string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationCommitsAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationCommitsAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestIterationCommitsAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationCommitsAsync (repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the iteration from which to get the commits.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified iteration of a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync (Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationCommitsAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationCommitsAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestIterationCommitsAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationCommitsAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the iteration from which to get the commits.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified iteration of a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync (Guid project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationCommitsAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationCommitsAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestIterationCommitsAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationCommitsAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the iteration from which to get the commits.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified iteration of a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync (string project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationCommitsAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationCommitsAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestIterationCommitsAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationCommitsAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the iteration from which to get the commits.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified iteration of a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync (string project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPullRequestIterationCommitsAsync(string project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationCommitsAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationCommitsAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPullRequestIterationCommitsAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationCommitsAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the iteration from which to get the commits.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the commits for the specified iteration of a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync (Guid repositoryId, int pullRequestId, Nullable&lt;bool&gt; includeCommits = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;bool&gt; includeCommits, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationsAsync(System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationsAsync : Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;&#xA;override this.GetPullRequestIterationsAsync : Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationsAsync (repositoryId, pullRequestId, includeCommits, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="includeCommits">If true, include the commits associated with each iteration in the response.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the list of iterations for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync (string repositoryId, int pullRequestId, Nullable&lt;bool&gt; includeCommits = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync(string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;bool&gt; includeCommits, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationsAsync(System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationsAsync : string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;&#xA;override this.GetPullRequestIterationsAsync : string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationsAsync (repositoryId, pullRequestId, includeCommits, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="includeCommits">If true, include the commits associated with each iteration in the response.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the list of iterations for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync (Guid project, Guid repositoryId, int pullRequestId, Nullable&lt;bool&gt; includeCommits = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;bool&gt; includeCommits, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationsAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationsAsync : Guid * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;&#xA;override this.GetPullRequestIterationsAsync : Guid * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationsAsync (project, repositoryId, pullRequestId, includeCommits, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="includeCommits">If true, include the commits associated with each iteration in the response.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the list of iterations for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync (Guid project, string repositoryId, int pullRequestId, Nullable&lt;bool&gt; includeCommits = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;bool&gt; includeCommits, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationsAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationsAsync : Guid * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;&#xA;override this.GetPullRequestIterationsAsync : Guid * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationsAsync (project, repositoryId, pullRequestId, includeCommits, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="includeCommits">If true, include the commits associated with each iteration in the response.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the list of iterations for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync (string project, Guid repositoryId, int pullRequestId, Nullable&lt;bool&gt; includeCommits = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;bool&gt; includeCommits, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationsAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationsAsync : string * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;&#xA;override this.GetPullRequestIterationsAsync : string * Guid * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationsAsync (project, repositoryId, pullRequestId, includeCommits, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="includeCommits">If true, include the commits associated with each iteration in the response.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the list of iterations for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync (string project, string repositoryId, int pullRequestId, Nullable&lt;bool&gt; includeCommits = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt; GetPullRequestIterationsAsync(string project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;bool&gt; includeCommits, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationsAsync(System.String,System.String,System.Int32,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationsAsync : string * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;&#xA;override this.GetPullRequestIterationsAsync : string * string * int * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationsAsync (project, repositoryId, pullRequestId, includeCommits, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="includeCommits">If true, include the commits associated with each iteration in the response.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the list of iterations for the specified pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync (Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusAsync(System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestIterationStatusAsync : Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusAsync (repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync (string repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync(string repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusAsync(System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestIterationStatusAsync : string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusAsync (repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync (Guid project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestIterationStatusAsync : Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync (Guid project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusAsync(System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestIterationStatusAsync : Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync (string project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusAsync(System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestIterationStatusAsync : string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync (string project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestIterationStatusAsync(string project, string repositoryId, int32 pullRequestId, int32 iterationId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestIterationStatusAsync : string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusAsync (project, repositoryId, pullRequestId, iterationId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync (Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusesAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusesAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestIterationStatusesAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusesAsync (repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request iteration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync (string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync(string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusesAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusesAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestIterationStatusesAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusesAsync (repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request iteration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync (Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusesAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusesAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestIterationStatusesAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusesAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request iteration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync (Guid project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusesAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusesAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestIterationStatusesAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusesAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request iteration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync (string project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusesAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusesAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestIterationStatusesAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusesAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request iteration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync (string project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestIterationStatusesAsync(string project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestIterationStatusesAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestIterationStatusesAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestIterationStatusesAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestIterationStatusesAsync (project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request iteration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync (Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync(valuetype System.Guid repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelAsync(System.Guid,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelAsync : Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.GetPullRequestLabelAsync : Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.GetPullRequestLabelAsync (repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a single label that has been assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync (string repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync(string repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelAsync(System.String,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelAsync : string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.GetPullRequestLabelAsync : string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.GetPullRequestLabelAsync (repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a single label that has been assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync (Guid project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelAsync(System.Guid,System.Guid,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelAsync : Guid * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.GetPullRequestLabelAsync : Guid * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.GetPullRequestLabelAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a single label that has been assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync (Guid project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelAsync(System.Guid,System.String,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelAsync : Guid * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.GetPullRequestLabelAsync : Guid * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.GetPullRequestLabelAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a single label that has been assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync (string project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelAsync(System.String,System.Guid,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelAsync : string * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.GetPullRequestLabelAsync : string * Guid * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.GetPullRequestLabelAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a single label that has been assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync (string project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt; GetPullRequestLabelAsync(string project, string repositoryId, int32 pullRequestId, string labelIdOrName, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelAsync(System.String,System.String,System.Int32,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelAsync : string * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&#xA;override this.GetPullRequestLabelAsync : string * string * int * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;" Usage="gitHttpClientBase.GetPullRequestLabelAsync (project, repositoryId, pullRequestId, labelIdOrName, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="labelIdOrName" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="labelIdOrName">The name or ID of the label requested.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a single label that has been assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync (Guid repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelsAsync(System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelsAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;&#xA;override this.GetPullRequestLabelsAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestLabelsAsync (repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the labels assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync (string repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync(string repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelsAsync(System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelsAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;&#xA;override this.GetPullRequestLabelsAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestLabelsAsync (repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the labels assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync (Guid project, Guid repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelsAsync(System.Guid,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelsAsync : Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;&#xA;override this.GetPullRequestLabelsAsync : Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestLabelsAsync (project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the labels assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync (Guid project, string repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelsAsync(System.Guid,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelsAsync : Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;&#xA;override this.GetPullRequestLabelsAsync : Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestLabelsAsync (project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the labels assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync (string project, Guid repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelsAsync(System.String,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelsAsync : string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;&#xA;override this.GetPullRequestLabelsAsync : string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestLabelsAsync (project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the labels assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync (string project, string repositoryId, int pullRequestId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt; GetPullRequestLabelsAsync(string project, string repositoryId, int32 pullRequestId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestLabelsAsync(System.String,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestLabelsAsync : string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;&#xA;override this.GetPullRequestLabelsAsync : string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestLabelsAsync (project, repositoryId, pullRequestId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.Core.WebApi.WebApiTagDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="projectId">Project ID or project name.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the labels assigned to a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync (Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestPropertiesAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestPropertiesAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.GetPullRequestPropertiesAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.GetPullRequestPropertiesAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get external properties of the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync (string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestPropertiesAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestPropertiesAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.GetPullRequestPropertiesAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.GetPullRequestPropertiesAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get external properties of the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestPropertiesAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestPropertiesAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.GetPullRequestPropertiesAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.GetPullRequestPropertiesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get external properties of the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync (Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestPropertiesAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestPropertiesAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.GetPullRequestPropertiesAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.GetPullRequestPropertiesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get external properties of the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync (string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestPropertiesAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestPropertiesAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.GetPullRequestPropertiesAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.GetPullRequestPropertiesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get external properties of the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync (string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; GetPullRequestPropertiesAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestPropertiesAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestPropertiesAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.GetPullRequestPropertiesAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.GetPullRequestPropertiesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get external properties of the pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestQueryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;&#xA;override this.GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;" Usage="gitHttpClientBase.GetPullRequestQueryAsync (queries, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries">The list of queries to perform.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -&gt; pull requests.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestQueryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;&#xA;override this.GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;" Usage="gitHttpClientBase.GetPullRequestQueryAsync (queries, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries">The list of queries to perform.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -&gt; pull requests.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestQueryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;&#xA;override this.GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;" Usage="gitHttpClientBase.GetPullRequestQueryAsync (queries, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries">The list of queries to perform.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -&gt; pull requests.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestQueryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;&#xA;override this.GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;" Usage="gitHttpClientBase.GetPullRequestQueryAsync (queries, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries">The list of queries to perform.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -&gt; pull requests.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestQueryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;&#xA;override this.GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;" Usage="gitHttpClientBase.GetPullRequestQueryAsync (queries, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries">The list of queries to perform.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -&gt; pull requests.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt; GetPullRequestQueryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery queries, string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestQueryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;&#xA;override this.GetPullRequestQueryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;" Usage="gitHttpClientBase.GetPullRequestQueryAsync (queries, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries">The list of queries to perform.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -&gt; pull requests.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync (Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync(valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewerAsync(System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewerAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.GetPullRequestReviewerAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.GetPullRequestReviewerAsync (repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a particular reviewer on a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync (string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync(string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewerAsync(System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewerAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.GetPullRequestReviewerAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.GetPullRequestReviewerAsync (repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a particular reviewer on a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync (Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewerAsync(System.Guid,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewerAsync : Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.GetPullRequestReviewerAsync : Guid * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.GetPullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a particular reviewer on a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync (Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewerAsync(System.Guid,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewerAsync : Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.GetPullRequestReviewerAsync : Guid * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.GetPullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a particular reviewer on a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync (string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewerAsync(System.String,System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewerAsync : string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.GetPullRequestReviewerAsync : string * Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.GetPullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a particular reviewer on a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync (string project, string repositoryId, int pullRequestId, string reviewerId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; GetPullRequestReviewerAsync(string project, string repositoryId, int32 pullRequestId, string reviewerId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewerAsync(System.String,System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewerAsync : string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&#xA;override this.GetPullRequestReviewerAsync : string * string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" Usage="gitHttpClientBase.GetPullRequestReviewerAsync (project, repositoryId, pullRequestId, reviewerId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="reviewerId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="reviewerId">ID of the reviewer.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a particular reviewer on a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync (Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewersAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewersAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.GetPullRequestReviewersAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestReviewersAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the reviewers for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync (string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewersAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewersAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.GetPullRequestReviewersAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestReviewersAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the reviewers for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewersAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewersAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.GetPullRequestReviewersAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestReviewersAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the reviewers for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync (Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewersAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewersAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.GetPullRequestReviewersAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestReviewersAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the reviewers for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync (string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewersAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewersAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.GetPullRequestReviewersAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestReviewersAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the reviewers for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync (string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt; GetPullRequestReviewersAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestReviewersAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestReviewersAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;&#xA;override this.GetPullRequestReviewersAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestReviewersAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve the reviewers for a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync (Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync(valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsAsync(System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsAsync (repositoryId, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync (string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync(string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsAsync(System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsAsync (repositoryId, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync (Guid project, Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsAsync(System.Guid,System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsAsync : Guid * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsAsync : Guid * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsAsync (project, repositoryId, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync (Guid project, string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync(valuetype System.Guid project, string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsAsync(System.Guid,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsAsync : Guid * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsAsync (project, repositoryId, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync (string project, Guid repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync(string project, valuetype System.Guid repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsAsync(System.String,System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsAsync : string * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsAsync : string * Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsAsync (project, repositoryId, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync (string project, string repositoryId, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsAsync(string project, string repositoryId, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsAsync(System.String,System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsAsync : string * string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsAsync (project, repositoryId, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsByProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsByProjectAsync (Guid project, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsByProjectAsync(valuetype System.Guid project, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsByProjectAsync(System.Guid,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsByProjectAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsByProjectAsync : Guid * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsByProjectAsync (project, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestsByProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsByProjectAsync (string project, Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, Nullable&lt;int&gt; maxCommentLength = null, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt; GetPullRequestsByProjectAsync(string project, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria searchCriteria, valuetype System.Nullable`1&lt;int32&gt; maxCommentLength, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestsByProjectAsync(System.String,Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestsByProjectAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;&#xA;override this.GetPullRequestsByProjectAsync : string * Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestsByProjectAsync (project, searchCriteria, maxCommentLength, skip, top, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria" />
        <Parameter Name="maxCommentLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="searchCriteria">Pull requests will be returned that match this search criteria.</param>
        <param name="maxCommentLength">Not used.</param>
        <param name="skip">The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="top">The number of pull requests to retrieve.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all pull requests matching a specified criteria.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync (Guid repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusAsync(System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestStatusAsync : Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestStatusAsync (repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync (string repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync(string repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusAsync(System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestStatusAsync : string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestStatusAsync (repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync (Guid project, Guid repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestStatusAsync : Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync (Guid project, string repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusAsync(System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestStatusAsync : Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync (string project, Guid repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusAsync(System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestStatusAsync : string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync (string project, string repositoryId, int pullRequestId, int statusId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt; GetPullRequestStatusAsync(string project, string repositoryId, int32 pullRequestId, int32 statusId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusAsync(System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&#xA;override this.GetPullRequestStatusAsync : string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;" Usage="gitHttpClientBase.GetPullRequestStatusAsync (project, repositoryId, pullRequestId, statusId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="statusId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="statusId">ID of the pull request status.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync (Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusesAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusesAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestStatusesAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestStatusesAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync (string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusesAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusesAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestStatusesAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestStatusesAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusesAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusesAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestStatusesAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestStatusesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync (Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusesAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusesAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestStatusesAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestStatusesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync (string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusesAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusesAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestStatusesAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestStatusesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync (string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt; GetPullRequestStatusesAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestStatusesAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestStatusesAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;&#xA;override this.GetPullRequestStatusesAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestStatusesAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get all the statuses associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync (Guid repositoryId, int pullRequestId, int threadId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync(valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestThreadAsync(System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestThreadAsync : Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.GetPullRequestThreadAsync : Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.GetPullRequestThreadAsync (repositoryId, pullRequestId, threadId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="iteration">If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync (string repositoryId, int pullRequestId, int threadId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync(string repositoryId, int32 pullRequestId, int32 threadId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestThreadAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestThreadAsync : string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.GetPullRequestThreadAsync : string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.GetPullRequestThreadAsync (repositoryId, pullRequestId, threadId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="iteration">If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync (Guid project, Guid repositoryId, int pullRequestId, int threadId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestThreadAsync(System.Guid,System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestThreadAsync : Guid * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.GetPullRequestThreadAsync : Guid * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.GetPullRequestThreadAsync (project, repositoryId, pullRequestId, threadId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="iteration">If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync (Guid project, string repositoryId, int pullRequestId, int threadId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestThreadAsync(System.Guid,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestThreadAsync : Guid * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.GetPullRequestThreadAsync : Guid * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.GetPullRequestThreadAsync (project, repositoryId, pullRequestId, threadId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="iteration">If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync (string project, Guid repositoryId, int pullRequestId, int threadId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestThreadAsync(System.String,System.Guid,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestThreadAsync : string * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.GetPullRequestThreadAsync : string * Guid * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.GetPullRequestThreadAsync (project, repositoryId, pullRequestId, threadId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="iteration">If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync (string project, string repositoryId, int pullRequestId, int threadId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; GetPullRequestThreadAsync(string project, string repositoryId, int32 pullRequestId, int32 threadId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestThreadAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestThreadAsync : string * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.GetPullRequestThreadAsync : string * string * int * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.GetPullRequestThreadAsync (project, repositoryId, pullRequestId, threadId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread.</param>
        <param name="iteration">If specified, thread position will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread position will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync (Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestWorkItemRefsAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemRefsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;&#xA;override this.GetPullRequestWorkItemRefsAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestWorkItemRefsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync (string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync(string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestWorkItemRefsAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemRefsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;&#xA;override this.GetPullRequestWorkItemRefsAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestWorkItemRefsAsync (repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync (Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestWorkItemRefsAsync(System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemRefsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;&#xA;override this.GetPullRequestWorkItemRefsAsync : Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestWorkItemRefsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync (Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestWorkItemRefsAsync(System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemRefsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;&#xA;override this.GetPullRequestWorkItemRefsAsync : Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestWorkItemRefsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync (string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestWorkItemRefsAsync(System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemRefsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;&#xA;override this.GetPullRequestWorkItemRefsAsync : string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestWorkItemRefsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPullRequestWorkItemRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync (string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt; GetPullRequestWorkItemRefsAsync(string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPullRequestWorkItemRefsAsync(System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPullRequestWorkItemRefsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;&#xA;override this.GetPullRequestWorkItemRefsAsync : string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;" Usage="gitHttpClientBase.GetPullRequestWorkItemRefsAsync (project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.VisualStudio.Services.WebApi.ResourceRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID or name of the repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of work items associated with a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync (Guid repositoryId, int pushId, Nullable&lt;int&gt; includeCommits = null, Nullable&lt;bool&gt; includeRefUpdates = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync(valuetype System.Guid repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeRefUpdates, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushAsync(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.GetPushAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.GetPushAsync (repositoryId, pushId, includeCommits, includeRefUpdates, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeRefUpdates" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="pushId">ID of the push.</param>
        <param name="includeCommits">The number of commits to include in the result.</param>
        <param name="includeRefUpdates">If true, include the list of refs that were updated by the push.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync (string repositoryId, int pushId, Nullable&lt;int&gt; includeCommits = null, Nullable&lt;bool&gt; includeRefUpdates = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync(string repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeRefUpdates, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.GetPushAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.GetPushAsync (repositoryId, pushId, includeCommits, includeRefUpdates, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeRefUpdates" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="pushId">ID of the push.</param>
        <param name="includeCommits">The number of commits to include in the result.</param>
        <param name="includeRefUpdates">If true, include the list of refs that were updated by the push.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync (Guid project, Guid repositoryId, int pushId, Nullable&lt;int&gt; includeCommits = null, Nullable&lt;bool&gt; includeRefUpdates = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeRefUpdates, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.GetPushAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.GetPushAsync (project, repositoryId, pushId, includeCommits, includeRefUpdates, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeRefUpdates" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="pushId">ID of the push.</param>
        <param name="includeCommits">The number of commits to include in the result.</param>
        <param name="includeRefUpdates">If true, include the list of refs that were updated by the push.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync (Guid project, string repositoryId, int pushId, Nullable&lt;int&gt; includeCommits = null, Nullable&lt;bool&gt; includeRefUpdates = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync(valuetype System.Guid project, string repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeRefUpdates, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.GetPushAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.GetPushAsync (project, repositoryId, pushId, includeCommits, includeRefUpdates, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeRefUpdates" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="pushId">ID of the push.</param>
        <param name="includeCommits">The number of commits to include in the result.</param>
        <param name="includeRefUpdates">If true, include the list of refs that were updated by the push.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync (string project, Guid repositoryId, int pushId, Nullable&lt;int&gt; includeCommits = null, Nullable&lt;bool&gt; includeRefUpdates = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync(string project, valuetype System.Guid repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeRefUpdates, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.GetPushAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.GetPushAsync (project, repositoryId, pushId, includeCommits, includeRefUpdates, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeRefUpdates" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="pushId">ID of the push.</param>
        <param name="includeCommits">The number of commits to include in the result.</param>
        <param name="includeRefUpdates">If true, include the list of refs that were updated by the push.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync (string project, string repositoryId, int pushId, Nullable&lt;int&gt; includeCommits = null, Nullable&lt;bool&gt; includeRefUpdates = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt; GetPushAsync(string project, string repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; includeCommits, valuetype System.Nullable`1&lt;bool&gt; includeRefUpdates, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&#xA;override this.GetPushAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;" Usage="gitHttpClientBase.GetPushAsync (project, repositoryId, pushId, includeCommits, includeRefUpdates, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="includeCommits" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeRefUpdates" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="pushId">ID of the push.</param>
        <param name="includeCommits">The number of commits to include in the result.</param>
        <param name="includeRefUpdates">If true, include the list of refs that were updated by the push.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync (Guid repositoryId, int pushId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync(valuetype System.Guid repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushCommitsAsync(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushCommitsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPushCommitsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPushCommitsAsync (repositoryId, pushId, top, skip, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="pushId">The id of the push.</param>
        <param name="top">The maximum number of commits to return ("get the top x commits").</param>
        <param name="skip">The number of commits to skip.</param>
        <param name="includeLinks">Set to false to avoid including REST Url links for resources. Defaults to true.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of commits associated with a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync (string repositoryId, int pushId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync(string repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushCommitsAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushCommitsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPushCommitsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPushCommitsAsync (repositoryId, pushId, top, skip, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="pushId">The id of the push.</param>
        <param name="top">The maximum number of commits to return ("get the top x commits").</param>
        <param name="skip">The number of commits to skip.</param>
        <param name="includeLinks">Set to false to avoid including REST Url links for resources. Defaults to true.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of commits associated with a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync (Guid project, Guid repositoryId, int pushId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushCommitsAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushCommitsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPushCommitsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPushCommitsAsync (project, repositoryId, pushId, top, skip, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="pushId">The id of the push.</param>
        <param name="top">The maximum number of commits to return ("get the top x commits").</param>
        <param name="skip">The number of commits to skip.</param>
        <param name="includeLinks">Set to false to avoid including REST Url links for resources. Defaults to true.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of commits associated with a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync (Guid project, string repositoryId, int pushId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync(valuetype System.Guid project, string repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushCommitsAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushCommitsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPushCommitsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPushCommitsAsync (project, repositoryId, pushId, top, skip, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="pushId">The id of the push.</param>
        <param name="top">The maximum number of commits to return ("get the top x commits").</param>
        <param name="skip">The number of commits to skip.</param>
        <param name="includeLinks">Set to false to avoid including REST Url links for resources. Defaults to true.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of commits associated with a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync (string project, Guid repositoryId, int pushId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync(string project, valuetype System.Guid repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushCommitsAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushCommitsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPushCommitsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPushCommitsAsync (project, repositoryId, pushId, top, skip, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="pushId">The id of the push.</param>
        <param name="top">The maximum number of commits to return ("get the top x commits").</param>
        <param name="skip">The number of commits to skip.</param>
        <param name="includeLinks">Set to false to avoid including REST Url links for resources. Defaults to true.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of commits associated with a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushCommitsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync (string project, string repositoryId, int pushId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; includeLinks = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt; GetPushCommitsAsync(string project, string repositoryId, int32 pushId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; includeLinks, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushCommitsAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushCommitsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;&#xA;override this.GetPushCommitsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;" Usage="gitHttpClientBase.GetPushCommitsAsync (project, repositoryId, pushId, top, skip, includeLinks, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pushId" Type="System.Int32" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The id or friendly name of the repository. To use the friendly name, projectId must also be specified.</param>
        <param name="pushId">The id of the push.</param>
        <param name="top">The maximum number of commits to return ("get the top x commits").</param>
        <param name="skip">The number of commits to skip.</param>
        <param name="includeLinks">Set to false to avoid including REST Url links for resources. Defaults to true.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a list of commits associated with a particular push.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync (Guid repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync(valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushesAsync(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushesAsync : Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;&#xA;override this.GetPushesAsync : Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;" Usage="gitHttpClientBase.GetPushesAsync (repositoryId, skip, top, searchCriteria, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of pushes to skip.</param>
        <param name="top">Number of pushes to return.</param>
        <param name="searchCriteria">Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves pushes associated with the specified repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync (string repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync(string repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;&#xA;override this.GetPushesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;" Usage="gitHttpClientBase.GetPushesAsync (repositoryId, skip, top, searchCriteria, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of pushes to skip.</param>
        <param name="top">Number of pushes to return.</param>
        <param name="searchCriteria">Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves pushes associated with the specified repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync (Guid project, Guid repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushesAsync(System.Guid,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushesAsync : Guid * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;&#xA;override this.GetPushesAsync : Guid * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;" Usage="gitHttpClientBase.GetPushesAsync (project, repositoryId, skip, top, searchCriteria, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of pushes to skip.</param>
        <param name="top">Number of pushes to return.</param>
        <param name="searchCriteria">Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves pushes associated with the specified repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync (Guid project, string repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync(valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushesAsync(System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushesAsync : Guid * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;&#xA;override this.GetPushesAsync : Guid * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;" Usage="gitHttpClientBase.GetPushesAsync (project, repositoryId, skip, top, searchCriteria, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of pushes to skip.</param>
        <param name="top">Number of pushes to return.</param>
        <param name="searchCriteria">Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves pushes associated with the specified repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync (string project, Guid repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync(string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushesAsync(System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushesAsync : string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;&#xA;override this.GetPushesAsync : string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;" Usage="gitHttpClientBase.GetPushesAsync (project, repositoryId, skip, top, searchCriteria, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of pushes to skip.</param>
        <param name="top">Number of pushes to return.</param>
        <param name="searchCriteria">Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves pushes associated with the specified repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPushesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync (string project, string repositoryId, Nullable&lt;int&gt; skip = null, Nullable&lt;int&gt; top = null, Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt; GetPushesAsync(string project, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria searchCriteria, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetPushesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPushesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;&#xA;override this.GetPushesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;" Usage="gitHttpClientBase.GetPushesAsync (project, repositoryId, skip, top, searchCriteria, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPush&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="searchCriteria" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="skip">Number of pushes to skip.</param>
        <param name="top">Number of pushes to return.</param>
        <param name="searchCriteria">Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieves pushes associated with the specified repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecycleBinRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetRecycleBinRepositoriesAsync (Guid project, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetRecycleBinRepositoriesAsync(valuetype System.Guid project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRecycleBinRepositoriesAsync(System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRecycleBinRepositoriesAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;&#xA;override this.GetRecycleBinRepositoriesAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;" Usage="gitHttpClientBase.GetRecycleBinRepositoriesAsync (project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve soft-deleted git repositories from the recycle bin.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecycleBinRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetRecycleBinRepositoriesAsync (string project, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt; GetRecycleBinRepositoriesAsync(string project, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRecycleBinRepositoriesAsync(System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRecycleBinRepositoriesAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;&#xA;override this.GetRecycleBinRepositoriesAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;" Usage="gitHttpClientBase.GetRecycleBinRepositoriesAsync (project, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve soft-deleted git repositories from the recycle bin.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefFavoriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; GetRefFavoriteAsync (Guid project, int favoriteId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; GetRefFavoriteAsync(valuetype System.Guid project, int32 favoriteId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefFavoriteAsync(System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefFavoriteAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&#xA;override this.GetRefFavoriteAsync : Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;" Usage="gitHttpClientBase.GetRefFavoriteAsync (project, favoriteId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="favoriteId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="favoriteId">The Id of the requested ref favorite.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the refs favorite for a favorite Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefFavoriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; GetRefFavoriteAsync (string project, int favoriteId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt; GetRefFavoriteAsync(string project, int32 favoriteId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefFavoriteAsync(System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefFavoriteAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&#xA;override this.GetRefFavoriteAsync : string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;" Usage="gitHttpClientBase.GetRefFavoriteAsync (project, favoriteId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="favoriteId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="favoriteId">The Id of the requested ref favorite.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the refs favorite for a favorite Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefFavoritesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt; GetRefFavoritesAsync (Guid project, string repositoryId = null, string identityId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt; GetRefFavoritesAsync(valuetype System.Guid project, string repositoryId, string identityId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefFavoritesAsync(System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefFavoritesAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt;&#xA;override this.GetRefFavoritesAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt;" Usage="gitHttpClientBase.GetRefFavoritesAsync (project, repositoryId, identityId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="identityId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The id of the repository.</param>
        <param name="identityId">The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the refs favorites for a repo and an identity.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefFavoritesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt; GetRefFavoritesAsync (string project, string repositoryId = null, string identityId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt; GetRefFavoritesAsync(string project, string repositoryId, string identityId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefFavoritesAsync(System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefFavoritesAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt;&#xA;override this.GetRefFavoritesAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt;" Usage="gitHttpClientBase.GetRefFavoritesAsync (project, repositoryId, identityId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="identityId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The id of the repository.</param>
        <param name="identityId">The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the refs favorites for a repo and an identity.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; latestStatusesOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; latestStatusesOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid project, Guid repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; latestStatusesOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid project, string repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; latestStatusesOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid project, string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : Guid * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : Guid * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string project, Guid repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; latestStatusesOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string project, valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : string * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : string * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string project, string repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; latestStatusesOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string project, string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRefsAsync : string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;&#xA;override this.GetRefsAsync : string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, latestStatusesOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs.</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeStatuses = null, Nullable&lt;bool&gt; includeMyBranches = null, Nullable&lt;bool&gt; latestStatusesOnly = null, Nullable&lt;bool&gt; peelTags = null, string filterContains = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, valuetype System.Nullable`1&lt;bool&gt; includeMyBranches, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, valuetype System.Nullable`1&lt;bool&gt; peelTags, string filterContains, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRefsAsync : Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (repositoryId, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeMyBranches" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="peelTags" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filterContains" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs (starts with).</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="includeStatuses">[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
        <param name="includeMyBranches">[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="peelTags">[optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
        <param name="filterContains">[optional] A filter to apply to the refs (contains).</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeStatuses = null, Nullable&lt;bool&gt; includeMyBranches = null, Nullable&lt;bool&gt; latestStatusesOnly = null, Nullable&lt;bool&gt; peelTags = null, string filterContains = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, valuetype System.Nullable`1&lt;bool&gt; includeMyBranches, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, valuetype System.Nullable`1&lt;bool&gt; peelTags, string filterContains, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRefsAsync : string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (repositoryId, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeMyBranches" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="peelTags" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filterContains" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs (starts with).</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="includeStatuses">[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
        <param name="includeMyBranches">[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="peelTags">[optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
        <param name="filterContains">[optional] A filter to apply to the refs (contains).</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid project, Guid repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeStatuses = null, Nullable&lt;bool&gt; includeMyBranches = null, Nullable&lt;bool&gt; latestStatusesOnly = null, Nullable&lt;bool&gt; peelTags = null, string filterContains = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, valuetype System.Nullable`1&lt;bool&gt; includeMyBranches, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, valuetype System.Nullable`1&lt;bool&gt; peelTags, string filterContains, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.Guid,System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRefsAsync : Guid * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeMyBranches" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="peelTags" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filterContains" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs (starts with).</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="includeStatuses">[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
        <param name="includeMyBranches">[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="peelTags">[optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
        <param name="filterContains">[optional] A filter to apply to the refs (contains).</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (Guid project, string repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeStatuses = null, Nullable&lt;bool&gt; includeMyBranches = null, Nullable&lt;bool&gt; latestStatusesOnly = null, Nullable&lt;bool&gt; peelTags = null, string filterContains = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(valuetype System.Guid project, string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, valuetype System.Nullable`1&lt;bool&gt; includeMyBranches, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, valuetype System.Nullable`1&lt;bool&gt; peelTags, string filterContains, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRefsAsync : Guid * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeMyBranches" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="peelTags" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filterContains" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs (starts with).</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="includeStatuses">[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
        <param name="includeMyBranches">[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="peelTags">[optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
        <param name="filterContains">[optional] A filter to apply to the refs (contains).</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string project, Guid repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeStatuses = null, Nullable&lt;bool&gt; includeMyBranches = null, Nullable&lt;bool&gt; latestStatusesOnly = null, Nullable&lt;bool&gt; peelTags = null, string filterContains = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string project, valuetype System.Guid repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, valuetype System.Nullable`1&lt;bool&gt; includeMyBranches, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, valuetype System.Nullable`1&lt;bool&gt; peelTags, string filterContains, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.String,System.Guid,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRefsAsync : string * Guid * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeMyBranches" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="peelTags" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filterContains" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs (starts with).</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="includeStatuses">[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
        <param name="includeMyBranches">[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="peelTags">[optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
        <param name="filterContains">[optional] A filter to apply to the refs (contains).</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync (string project, string repositoryId, string filter = null, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeStatuses = null, Nullable&lt;bool&gt; includeMyBranches = null, Nullable&lt;bool&gt; latestStatusesOnly = null, Nullable&lt;bool&gt; peelTags = null, string filterContains = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt; GetRefsAsync(string project, string repositoryId, string filter, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeStatuses, valuetype System.Nullable`1&lt;bool&gt; includeMyBranches, valuetype System.Nullable`1&lt;bool&gt; latestStatusesOnly, valuetype System.Nullable`1&lt;bool&gt; peelTags, string filterContains, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRefsAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRefsAsync : string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;" Usage="gitHttpClientBase.GetRefsAsync (project, repositoryId, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeStatuses" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeMyBranches" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="latestStatusesOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="peelTags" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filterContains" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">[optional] A filter to apply to the refs (starts with).</param>
        <param name="includeLinks">[optional] Specifies if referenceLinks should be included in the result. default is false.</param>
        <param name="includeStatuses">[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.</param>
        <param name="includeMyBranches">[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.</param>
        <param name="latestStatusesOnly">[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.</param>
        <param name="peelTags">[optional] Annotated tags will populate the PeeledObjectId property. default is false.</param>
        <param name="filterContains">[optional] A filter to apply to the refs (contains).</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Queries the provided repository for its refs and returns them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeAllUrls = null, Nullable&lt;bool&gt; includeHidden = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeAllUrls, valuetype System.Nullable`1&lt;bool&gt; includeHidden, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoriesAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoriesAsync : Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitHttpClientBase.GetRepositoriesAsync (includeLinks, includeAllUrls, includeHidden, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeAllUrls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeHidden" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includeLinks">[optional] True to include reference links. The default value is false.</param>
        <param name="includeAllUrls">[optional] True to include all remote URLs. The default value is false.</param>
        <param name="includeHidden">[optional] True to include hidden repositories. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (Guid project, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeAllUrls = null, Nullable&lt;bool&gt; includeHidden = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(valuetype System.Guid project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeAllUrls, valuetype System.Nullable`1&lt;bool&gt; includeHidden, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoriesAsync(System.Guid,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoriesAsync : Guid * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitHttpClientBase.GetRepositoriesAsync (project, includeLinks, includeAllUrls, includeHidden, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeAllUrls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeHidden" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="includeLinks">[optional] True to include reference links. The default value is false.</param>
        <param name="includeAllUrls">[optional] True to include all remote URLs. The default value is false.</param>
        <param name="includeHidden">[optional] True to include hidden repositories. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync (string project, Nullable&lt;bool&gt; includeLinks = null, Nullable&lt;bool&gt; includeAllUrls = null, Nullable&lt;bool&gt; includeHidden = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt; GetRepositoriesAsync(string project, valuetype System.Nullable`1&lt;bool&gt; includeLinks, valuetype System.Nullable`1&lt;bool&gt; includeAllUrls, valuetype System.Nullable`1&lt;bool&gt; includeHidden, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoriesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoriesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;" Usage="gitHttpClientBase.GetRepositoriesAsync (project, includeLinks, includeAllUrls, includeHidden, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="includeLinks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeAllUrls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeHidden" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="includeLinks">[optional] True to include reference links. The default value is false.</param>
        <param name="includeAllUrls">[optional] True to include all remote URLs. The default value is false.</param>
        <param name="includeHidden">[optional] True to include hidden repositories. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve git repositories.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid repositoryId, Nullable&lt;bool&gt; includeParent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string repositoryId, Nullable&lt;bool&gt; includeParent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, Guid repositoryId, Nullable&lt;bool&gt; includeParent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (Guid project, string repositoryId, Nullable&lt;bool&gt; includeParent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, Guid repositoryId, Nullable&lt;bool&gt; includeParent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync (string project, string repositoryId, Nullable&lt;bool&gt; includeParent = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryAsync(string project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryAsync(System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetRepositoryAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeParent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">[optional] True to include parent repository. The default value is false.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryWithParentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync (Guid repositoryId, bool includeParent, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync(valuetype System.Guid repositoryId, bool includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryWithParentAsync(System.Guid,System.Boolean,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryWithParentAsync : Guid * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryWithParentAsync : Guid * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryWithParentAsync (repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeParent" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">True to include parent repository. Only available in authenticated calls.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryWithParentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync (string repositoryId, bool includeParent, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync(string repositoryId, bool includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryWithParentAsync(System.String,System.Boolean,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryWithParentAsync : string * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryWithParentAsync : string * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryWithParentAsync (repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeParent" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">True to include parent repository. Only available in authenticated calls.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryWithParentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync (Guid project, Guid repositoryId, bool includeParent, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, bool includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryWithParentAsync(System.Guid,System.Guid,System.Boolean,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryWithParentAsync : Guid * Guid * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryWithParentAsync : Guid * Guid * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryWithParentAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeParent" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">True to include parent repository. Only available in authenticated calls.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryWithParentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync (Guid project, string repositoryId, bool includeParent, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync(valuetype System.Guid project, string repositoryId, bool includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryWithParentAsync(System.Guid,System.String,System.Boolean,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryWithParentAsync : Guid * string * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryWithParentAsync : Guid * string * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryWithParentAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeParent" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">True to include parent repository. Only available in authenticated calls.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryWithParentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync (string project, Guid repositoryId, bool includeParent, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync(string project, valuetype System.Guid repositoryId, bool includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryWithParentAsync(System.String,System.Guid,System.Boolean,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryWithParentAsync : string * Guid * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryWithParentAsync : string * Guid * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryWithParentAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeParent" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">True to include parent repository. Only available in authenticated calls.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryWithParentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync (string project, string repositoryId, bool includeParent, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; GetRepositoryWithParentAsync(string project, string repositoryId, bool includeParent, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRepositoryWithParentAsync(System.String,System.String,System.Boolean,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryWithParentAsync : string * string * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.GetRepositoryWithParentAsync : string * string * bool * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.GetRepositoryWithParentAsync (project, repositoryId, includeParent, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeParent" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeParent">True to include parent repository. Only available in authenticated calls.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync (Guid project, int revertId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync(valuetype System.Guid project, int32 revertId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertAsync(System.Guid,System.Int32,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertAsync : Guid * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertAsync : Guid * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertAsync (project, revertId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="revertId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="revertId">ID of the revert operation.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation by revert Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync (Guid project, int revertId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync(valuetype System.Guid project, int32 revertId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertAsync(System.Guid,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertAsync : Guid * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertAsync (project, revertId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="revertId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="revertId">ID of the revert operation.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation by revert Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync (string project, int revertId, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync(string project, int32 revertId, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertAsync(System.String,System.Int32,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertAsync : string * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertAsync : string * int * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertAsync (project, revertId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="revertId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="revertId">ID of the revert operation.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation by revert Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync (string project, int revertId, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertAsync(string project, int32 revertId, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertAsync(System.String,System.Int32,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertAsync : string * int * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertAsync (project, revertId, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="revertId" Type="System.Int32" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="revertId">ID of the revert operation.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation by revert Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync (Guid project, Guid repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertForRefNameAsync(System.Guid,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertForRefNameAsync : Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertForRefNameAsync : Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the revert operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync (Guid project, string repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync(valuetype System.Guid project, string repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertForRefNameAsync(System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertForRefNameAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertForRefNameAsync : Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the revert operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync (string project, Guid repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync(string project, valuetype System.Guid repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertForRefNameAsync(System.String,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertForRefNameAsync : string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertForRefNameAsync : string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the revert operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevertForRefNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync (string project, string repositoryId, string refName, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt; GetRevertForRefNameAsync(string project, string repositoryId, string refName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetRevertForRefNameAsync(System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetRevertForRefNameAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;&#xA;override this.GetRevertForRefNameAsync : string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;" Usage="gitHttpClientBase.GetRevertForRefNameAsync (project, repositoryId, refName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="refName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="refName">The GitAsyncRefOperationParameters generatedRefName used for the revert operation.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve information about a revert operation for a specific branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync (string commitId, Guid repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; latestOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync(string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; latestOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetStatusesAsync(System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusesAsync : string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;&#xA;override this.GetStatusesAsync : string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;" Usage="gitHttpClientBase.GetStatusesAsync (commitId, repositoryId, top, skip, latestOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="latestOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="top">Optional. The number of statuses to retrieve. Default is 1000.</param>
        <param name="skip">Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="latestOnly">The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get statuses associated with the Git commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync (string commitId, string repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; latestOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync(string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; latestOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetStatusesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;&#xA;override this.GetStatusesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;" Usage="gitHttpClientBase.GetStatusesAsync (commitId, repositoryId, top, skip, latestOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="latestOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="top">Optional. The number of statuses to retrieve. Default is 1000.</param>
        <param name="skip">Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="latestOnly">The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get statuses associated with the Git commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync (Guid project, string commitId, Guid repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; latestOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync(valuetype System.Guid project, string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; latestOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetStatusesAsync(System.Guid,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusesAsync : Guid * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;&#xA;override this.GetStatusesAsync : Guid * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;" Usage="gitHttpClientBase.GetStatusesAsync (project, commitId, repositoryId, top, skip, latestOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="latestOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="top">Optional. The number of statuses to retrieve. Default is 1000.</param>
        <param name="skip">Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="latestOnly">The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get statuses associated with the Git commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync (Guid project, string commitId, string repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; latestOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync(valuetype System.Guid project, string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; latestOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetStatusesAsync(System.Guid,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusesAsync : Guid * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;&#xA;override this.GetStatusesAsync : Guid * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;" Usage="gitHttpClientBase.GetStatusesAsync (project, commitId, repositoryId, top, skip, latestOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="latestOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="top">Optional. The number of statuses to retrieve. Default is 1000.</param>
        <param name="skip">Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="latestOnly">The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get statuses associated with the Git commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync (string project, string commitId, Guid repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; latestOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync(string project, string commitId, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; latestOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetStatusesAsync(System.String,System.String,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusesAsync : string * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;&#xA;override this.GetStatusesAsync : string * string * Guid * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;" Usage="gitHttpClientBase.GetStatusesAsync (project, commitId, repositoryId, top, skip, latestOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="latestOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="top">Optional. The number of statuses to retrieve. Default is 1000.</param>
        <param name="skip">Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="latestOnly">The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get statuses associated with the Git commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync (string project, string commitId, string repositoryId, Nullable&lt;int&gt; top = null, Nullable&lt;int&gt; skip = null, Nullable&lt;bool&gt; latestOnly = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt; GetStatusesAsync(string project, string commitId, string repositoryId, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;bool&gt; latestOnly, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetStatusesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;&#xA;override this.GetStatusesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;" Usage="gitHttpClientBase.GetStatusesAsync (project, commitId, repositoryId, top, skip, latestOnly, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="commitId" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="latestOnly" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="commitId">ID of the Git commit.</param>
        <param name="repositoryId">ID of the repository.</param>
        <param name="top">Optional. The number of statuses to retrieve. Default is 1000.</param>
        <param name="skip">Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.</param>
        <param name="latestOnly">The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Get statuses associated with the Git commit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync (Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync(valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetSuggestionsAsync(System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestionsAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;&#xA;override this.GetSuggestionsAsync : Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;" Usage="gitHttpClientBase.GetSuggestionsAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request suggestion for a particular repository or team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync (string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync(string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetSuggestionsAsync(System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestionsAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;&#xA;override this.GetSuggestionsAsync : string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;" Usage="gitHttpClientBase.GetSuggestionsAsync (repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request suggestion for a particular repository or team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync (Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetSuggestionsAsync(System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestionsAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;&#xA;override this.GetSuggestionsAsync : Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;" Usage="gitHttpClientBase.GetSuggestionsAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request suggestion for a particular repository or team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync (Guid project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync(valuetype System.Guid project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetSuggestionsAsync(System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestionsAsync : Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;&#xA;override this.GetSuggestionsAsync : Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;" Usage="gitHttpClientBase.GetSuggestionsAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request suggestion for a particular repository or team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync (string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync(string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetSuggestionsAsync(System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestionsAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;&#xA;override this.GetSuggestionsAsync : string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;" Usage="gitHttpClientBase.GetSuggestionsAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request suggestion for a particular repository or team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuggestionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync (string project, string repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt; GetSuggestionsAsync(string project, string repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetSuggestionsAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetSuggestionsAsync : string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;&#xA;override this.GetSuggestionsAsync : string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;" Usage="gitHttpClientBase.GetSuggestionsAsync (project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve a pull request suggestion for a particular repository or team project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync (Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync(valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetThreadsAsync(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;&#xA;override this.GetThreadsAsync : Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;" Usage="gitHttpClientBase.GetThreadsAsync (repositoryId, pullRequestId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iteration">If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all threads in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync (string repositoryId, int pullRequestId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync(string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetThreadsAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;&#xA;override this.GetThreadsAsync : string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;" Usage="gitHttpClientBase.GetThreadsAsync (repositoryId, pullRequestId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iteration">If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all threads in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync (Guid project, Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetThreadsAsync(System.Guid,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;&#xA;override this.GetThreadsAsync : Guid * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;" Usage="gitHttpClientBase.GetThreadsAsync (project, repositoryId, pullRequestId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iteration">If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all threads in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync (Guid project, string repositoryId, int pullRequestId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync(valuetype System.Guid project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetThreadsAsync(System.Guid,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;&#xA;override this.GetThreadsAsync : Guid * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;" Usage="gitHttpClientBase.GetThreadsAsync (project, repositoryId, pullRequestId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iteration">If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all threads in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync (string project, Guid repositoryId, int pullRequestId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync(string project, valuetype System.Guid repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetThreadsAsync(System.String,System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;&#xA;override this.GetThreadsAsync : string * Guid * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;" Usage="gitHttpClientBase.GetThreadsAsync (project, repositoryId, pullRequestId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iteration">If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all threads in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync (string project, string repositoryId, int pullRequestId, Nullable&lt;int&gt; iteration = null, Nullable&lt;int&gt; baseIteration = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt; GetThreadsAsync(string project, string repositoryId, int32 pullRequestId, valuetype System.Nullable`1&lt;int32&gt; iteration, valuetype System.Nullable`1&lt;int32&gt; baseIteration, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetThreadsAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;&#xA;override this.GetThreadsAsync : string * string * int * Nullable&lt;int&gt; * Nullable&lt;int&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;" Usage="gitHttpClientBase.GetThreadsAsync (project, repositoryId, pullRequestId, iteration, baseIteration, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="baseIteration" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iteration">If specified, thread positions will be tracked using this iteration as the right side of the diff.</param>
        <param name="baseIteration">If specified, thread positions will be tracked using this iteration as the left side of the diff.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve all threads in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync (Guid repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync(valuetype System.Guid repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;&#xA;override this.GetTreeAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;" Usage="gitHttpClientBase.GetTreeAsync (repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync (string repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync(string repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;&#xA;override this.GetTreeAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;" Usage="gitHttpClientBase.GetTreeAsync (repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync (Guid project, Guid repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeAsync : Guid * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;&#xA;override this.GetTreeAsync : Guid * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;" Usage="gitHttpClientBase.GetTreeAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync (Guid project, string repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync(valuetype System.Guid project, string repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeAsync(System.Guid,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeAsync : Guid * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;&#xA;override this.GetTreeAsync : Guid * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;" Usage="gitHttpClientBase.GetTreeAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync (string project, Guid repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync(string project, valuetype System.Guid repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeAsync(System.String,System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeAsync : string * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;&#xA;override this.GetTreeAsync : string * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;" Usage="gitHttpClientBase.GetTreeAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync (string project, string repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt; GetTreeAsync(string project, string repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeAsync : string * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;&#xA;override this.GetTreeAsync : string * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;" Usage="gitHttpClientBase.GetTreeAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync (Guid project, Guid repositoryId, string baseId = null, string targetId = null, Nullable&lt;int&gt; top = null, string continuationToken = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string baseId, string targetId, valuetype System.Nullable`1&lt;int32&gt; top, string continuationToken, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeDiffsAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{System.Int32},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeDiffsAsync : Guid * Guid * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;&#xA;override this.GetTreeDiffsAsync : Guid * Guid * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;" Usage="gitHttpClientBase.GetTreeDiffsAsync (project, repositoryId, baseId, targetId, top, continuationToken, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="baseId" Type="System.String" />
        <Parameter Name="targetId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">Friendly name or guid of repository</param>
        <param name="baseId">Sha1Id of base tree or commit</param>
        <param name="targetId">Sha1Id of target tree or commit</param>
        <param name="top">Maximum number of changes to return</param>
        <param name="continuationToken"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the differences between two trees. Commits will be resolved to the trees they point to.  Renames and object type changes are returned as delete on the old object and add on the new object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync (Guid project, string repositoryId, string baseId = null, string targetId = null, Nullable&lt;int&gt; top = null, string continuationToken = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync(valuetype System.Guid project, string repositoryId, string baseId, string targetId, valuetype System.Nullable`1&lt;int32&gt; top, string continuationToken, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeDiffsAsync(System.Guid,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeDiffsAsync : Guid * string * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;&#xA;override this.GetTreeDiffsAsync : Guid * string * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;" Usage="gitHttpClientBase.GetTreeDiffsAsync (project, repositoryId, baseId, targetId, top, continuationToken, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="baseId" Type="System.String" />
        <Parameter Name="targetId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">Friendly name or guid of repository</param>
        <param name="baseId">Sha1Id of base tree or commit</param>
        <param name="targetId">Sha1Id of target tree or commit</param>
        <param name="top">Maximum number of changes to return</param>
        <param name="continuationToken"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the differences between two trees. Commits will be resolved to the trees they point to.  Renames and object type changes are returned as delete on the old object and add on the new object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync (string project, Guid repositoryId, string baseId = null, string targetId = null, Nullable&lt;int&gt; top = null, string continuationToken = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync(string project, valuetype System.Guid repositoryId, string baseId, string targetId, valuetype System.Nullable`1&lt;int32&gt; top, string continuationToken, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeDiffsAsync(System.String,System.Guid,System.String,System.String,System.Nullable{System.Int32},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeDiffsAsync : string * Guid * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;&#xA;override this.GetTreeDiffsAsync : string * Guid * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;" Usage="gitHttpClientBase.GetTreeDiffsAsync (project, repositoryId, baseId, targetId, top, continuationToken, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="baseId" Type="System.String" />
        <Parameter Name="targetId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Friendly name or guid of repository</param>
        <param name="baseId">Sha1Id of base tree or commit</param>
        <param name="targetId">Sha1Id of target tree or commit</param>
        <param name="top">Maximum number of changes to return</param>
        <param name="continuationToken"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the differences between two trees. Commits will be resolved to the trees they point to.  Renames and object type changes are returned as delete on the old object and add on the new object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeDiffsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync (string project, string repositoryId, string baseId = null, string targetId = null, Nullable&lt;int&gt; top = null, string continuationToken = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt; GetTreeDiffsAsync(string project, string repositoryId, string baseId, string targetId, valuetype System.Nullable`1&lt;int32&gt; top, string continuationToken, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeDiffsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeDiffsAsync : string * string * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;&#xA;override this.GetTreeDiffsAsync : string * string * string * string * Nullable&lt;int&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;" Usage="gitHttpClientBase.GetTreeDiffsAsync (project, repositoryId, baseId, targetId, top, continuationToken, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="baseId" Type="System.String" />
        <Parameter Name="targetId" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Friendly name or guid of repository</param>
        <param name="baseId">Sha1Id of base tree or commit</param>
        <param name="targetId">Sha1Id of target tree or commit</param>
        <param name="top">Maximum number of changes to return</param>
        <param name="continuationToken"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Gets the differences between two trees. Commits will be resolved to the trees they point to.  Renames and object type changes are returned as delete on the old object and add on the new object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetTreeZipAsync (Guid repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetTreeZipAsync(valuetype System.Guid repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeZipAsync(System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetTreeZipAsync : Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetTreeZipAsync (repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetTreeZipAsync (string repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetTreeZipAsync(string repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeZipAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeZipAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetTreeZipAsync : string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetTreeZipAsync (repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetTreeZipAsync (Guid project, Guid repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetTreeZipAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeZipAsync(System.Guid,System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeZipAsync : Guid * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetTreeZipAsync : Guid * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetTreeZipAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetTreeZipAsync (Guid project, string repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetTreeZipAsync(valuetype System.Guid project, string repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeZipAsync(System.Guid,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeZipAsync : Guid * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetTreeZipAsync : Guid * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetTreeZipAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetTreeZipAsync (string project, Guid repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetTreeZipAsync(string project, valuetype System.Guid repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeZipAsync(System.String,System.Guid,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeZipAsync : string * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetTreeZipAsync : string * Guid * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetTreeZipAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeZipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetTreeZipAsync (string project, string repositoryId, string sha1, string projectId = null, Nullable&lt;bool&gt; recursive = null, string fileName = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetTreeZipAsync(string project, string repositoryId, string sha1, string projectId, valuetype System.Nullable`1&lt;bool&gt; recursive, string fileName, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.GetTreeZipAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetTreeZipAsync : string * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.GetTreeZipAsync : string * string * string * string * Nullable&lt;bool&gt; * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="gitHttpClientBase.GetTreeZipAsync (project, repositoryId, sha1, projectId, recursive, fileName, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="sha1" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">Repository Id.</param>
        <param name="sha1">SHA1 hash of the tree object.</param>
        <param name="projectId">Project Id.</param>
        <param name="recursive">Search recursively. Include trees underneath this tree. Default is false.</param>
        <param name="fileName">Name to use if a .zip file is returned. Default is the object ID.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryImportRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync (Guid project, Guid repositoryId, Nullable&lt;bool&gt; includeAbandoned = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync(valuetype System.Guid project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.QueryImportRequestsAsync(System.Guid,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member QueryImportRequestsAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;&#xA;override this.QueryImportRequestsAsync : Guid * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;" Usage="gitHttpClientBase.QueryImportRequestsAsync (project, repositoryId, includeAbandoned, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned import requests in the results.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve import requests for a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryImportRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync (Guid project, string repositoryId, Nullable&lt;bool&gt; includeAbandoned = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync(valuetype System.Guid project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.QueryImportRequestsAsync(System.Guid,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member QueryImportRequestsAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;&#xA;override this.QueryImportRequestsAsync : Guid * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;" Usage="gitHttpClientBase.QueryImportRequestsAsync (project, repositoryId, includeAbandoned, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned import requests in the results.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve import requests for a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryImportRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync (string project, Guid repositoryId, Nullable&lt;bool&gt; includeAbandoned = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync(string project, valuetype System.Guid repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.QueryImportRequestsAsync(System.String,System.Guid,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member QueryImportRequestsAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;&#xA;override this.QueryImportRequestsAsync : string * Guid * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;" Usage="gitHttpClientBase.QueryImportRequestsAsync (project, repositoryId, includeAbandoned, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned import requests in the results.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve import requests for a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryImportRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync (string project, string repositoryId, Nullable&lt;bool&gt; includeAbandoned = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt; QueryImportRequestsAsync(string project, string repositoryId, valuetype System.Nullable`1&lt;bool&gt; includeAbandoned, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.QueryImportRequestsAsync(System.String,System.String,System.Nullable{System.Boolean},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member QueryImportRequestsAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;&#xA;override this.QueryImportRequestsAsync : string * string * Nullable&lt;bool&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;" Usage="gitHttpClientBase.QueryImportRequestsAsync (project, repositoryId, includeAbandoned, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="includeAbandoned" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="includeAbandoned">True to include abandoned import requests in the results.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retrieve import requests for a repository.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreRepositoryFromRecycleBinAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; RestoreRepositoryFromRecycleBinAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails repositoryDetails, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; RestoreRepositoryFromRecycleBinAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails repositoryDetails, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.RestoreRepositoryFromRecycleBinAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RestoreRepositoryFromRecycleBinAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.RestoreRepositoryFromRecycleBinAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.RestoreRepositoryFromRecycleBinAsync (repositoryDetails, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryDetails" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryDetails"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreRepositoryFromRecycleBinAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; RestoreRepositoryFromRecycleBinAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails repositoryDetails, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; RestoreRepositoryFromRecycleBinAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails repositoryDetails, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.RestoreRepositoryFromRecycleBinAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RestoreRepositoryFromRecycleBinAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.RestoreRepositoryFromRecycleBinAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.RestoreRepositoryFromRecycleBinAsync (repositoryDetails, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryDetails" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryDetails"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SharePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SharePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.SharePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.SharePullRequestAsync (userMessage, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userMessage" Type="Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userMessage"></param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Sends an e-mail notification about a specific pull request to a set of recipients
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SharePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SharePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.SharePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.SharePullRequestAsync (userMessage, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userMessage" Type="Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userMessage"></param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Sends an e-mail notification about a specific pull request to a set of recipients
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SharePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SharePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.SharePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.SharePullRequestAsync (userMessage, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userMessage" Type="Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userMessage"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Sends an e-mail notification about a specific pull request to a set of recipients
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SharePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SharePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.SharePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.SharePullRequestAsync (userMessage, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userMessage" Type="Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userMessage"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Sends an e-mail notification about a specific pull request to a set of recipients
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SharePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SharePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.SharePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.SharePullRequestAsync (userMessage, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userMessage" Type="Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userMessage"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Sends an e-mail notification about a specific pull request to a set of recipients
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SharePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SharePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext userMessage, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.SharePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SharePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.SharePullRequestAsync (userMessage, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userMessage" Type="Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userMessage"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">ID of the git repository.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Sends an e-mail notification about a specific pull request to a set of recipients
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.UpdateCommentAsync (comment, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment content that should be updated.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.UpdateCommentAsync (comment, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment content that should be updated.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.UpdateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment content that should be updated.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.Guid,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * Guid * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.UpdateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment content that should be updated.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.String,System.Guid,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * Guid * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.UpdateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment content that should be updated.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync (Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt; UpdateCommentAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.Comment comment, string project, string repositoryId, int32 pullRequestId, int32 threadId, int32 commentId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateCommentAsync(Microsoft.TeamFoundation.SourceControl.WebApi.Comment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;&#xA;override this.UpdateCommentAsync : Microsoft.TeamFoundation.SourceControl.WebApi.Comment * string * string * int * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;" Usage="gitHttpClientBase.UpdateCommentAsync (comment, project, repositoryId, pullRequestId, threadId, commentId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.Comment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="Microsoft.TeamFoundation.SourceControl.WebApi.Comment" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="commentId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="comment">The comment content that should be updated.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread that the desired comment is in.</param>
        <param name="commentId">ID of the comment to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a comment associated with a specific thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, Guid project, Guid repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.UpdateImportRequestAsync (importRequestToUpdate, project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequestToUpdate">The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retry or abandon a failed import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, Guid project, string repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, valuetype System.Guid project, string repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.UpdateImportRequestAsync (importRequestToUpdate, project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequestToUpdate">The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retry or abandon a failed import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, string project, Guid repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, string project, valuetype System.Guid repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.UpdateImportRequestAsync (importRequestToUpdate, project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequestToUpdate">The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retry or abandon a failed import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateImportRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, string project, string repositoryId, int importRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt; UpdateImportRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest importRequestToUpdate, string project, string repositoryId, int32 importRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateImportRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;&#xA;override this.UpdateImportRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;" Usage="gitHttpClientBase.UpdateImportRequestAsync (importRequestToUpdate, project, repositoryId, importRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="importRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="importRequestToUpdate">The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="importRequestId">The unique identifier for the import request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Retry or abandon a failed import request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.UpdatePullRequestAsync (gitPullRequestToUpdate, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToUpdate">The pull request content that should be updated.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.UpdatePullRequestAsync (gitPullRequestToUpdate, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToUpdate">The pull request content that should be updated.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.UpdatePullRequestAsync (gitPullRequestToUpdate, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToUpdate">The pull request content that should be updated.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.UpdatePullRequestAsync (gitPullRequestToUpdate, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToUpdate">The pull request content that should be updated.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.UpdatePullRequestAsync (gitPullRequestToUpdate, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToUpdate">The pull request content that should be updated.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt; UpdatePullRequestAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest gitPullRequestToUpdate, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;&#xA;override this.UpdatePullRequestAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;" Usage="gitHttpClientBase.UpdatePullRequestAsync (gitPullRequestToUpdate, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gitPullRequestToUpdate" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gitPullRequestToUpdate">The pull request content that should be updated.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a pull request
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, Guid repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, valuetype System.Guid repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictAsync (conflict, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict"></param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update merge conflict resolution
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, string repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, string repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictAsync (conflict, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict"></param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update merge conflict resolution
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, Guid project, Guid repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict,System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictAsync (conflict, project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update merge conflict resolution
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, Guid project, string repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict,System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictAsync (conflict, project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update merge conflict resolution
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, string project, Guid repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict,System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictAsync (conflict, project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update merge conflict resolution
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, string project, string repositoryId, int pullRequestId, int conflictId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; UpdatePullRequestConflictAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict conflict, string project, string repositoryId, int32 pullRequestId, int32 conflictId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict,System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;&#xA;override this.UpdatePullRequestConflictAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictAsync (conflict, project, repositoryId, pullRequestId, conflictId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="conflictId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="conflictId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update merge conflict resolution
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict},System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;&#xA;override this.UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictsAsync (conflictUpdates, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflictUpdates"></param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update multiple merge conflict resolutions
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict},System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;&#xA;override this.UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictsAsync (conflictUpdates, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflictUpdates"></param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update multiple merge conflict resolutions
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict},System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;&#xA;override this.UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictsAsync (conflictUpdates, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflictUpdates"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update multiple merge conflict resolutions
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict},System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;&#xA;override this.UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictsAsync (conflictUpdates, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflictUpdates"></param>
        <param name="project">Project ID</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update multiple merge conflict resolutions
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict},System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;&#xA;override this.UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictsAsync (conflictUpdates, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflictUpdates"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update multiple merge conflict resolutions
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestConflictsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt; UpdatePullRequestConflictsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; conflictUpdates, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestConflictsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict},System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;&#xA;override this.UpdatePullRequestConflictsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt; * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdatePullRequestConflictsAsync (conflictUpdates, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflictUpdates"></param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId"></param>
        <param name="pullRequestId"></param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update multiple merge conflict resolutions
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestIterationStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestIterationStatusesAsync (patchDocument, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request iteration statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestIterationStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestIterationStatusesAsync (patchDocument, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request iteration statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestIterationStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestIterationStatusesAsync (patchDocument, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request iteration statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestIterationStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestIterationStatusesAsync (patchDocument, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request iteration statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, Guid repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestIterationStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestIterationStatusesAsync (patchDocument, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request iteration statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestIterationStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, string repositoryId, int pullRequestId, int iterationId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestIterationStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, string repositoryId, int32 pullRequestId, int32 iterationId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestIterationStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestIterationStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestIterationStatusesAsync (patchDocument, project, repositoryId, pullRequestId, iterationId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="iterationId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="iterationId">ID of the pull request iteration.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request iteration statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestPropertiesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.UpdatePullRequestPropertiesAsync (patchDocument, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Properties to add, replace or remove in JSON Patch format.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestPropertiesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.UpdatePullRequestPropertiesAsync (patchDocument, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Properties to add, replace or remove in JSON Patch format.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestPropertiesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.UpdatePullRequestPropertiesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Properties to add, replace or remove in JSON Patch format.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestPropertiesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.UpdatePullRequestPropertiesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Properties to add, replace or remove in JSON Patch format.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestPropertiesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.UpdatePullRequestPropertiesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Properties to add, replace or remove in JSON Patch format.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt; UpdatePullRequestPropertiesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestPropertiesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;&#xA;override this.UpdatePullRequestPropertiesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;" Usage="gitHttpClientBase.UpdatePullRequestPropertiesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.VisualStudio.Services.WebApi.PropertiesCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Properties to add, replace or remove in JSON Patch format.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestReviewersAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestReviewersAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestReviewersAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote},System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestReviewersAsync (patchVotes, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchVotes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchVotes">IDs of the reviewers whose votes will be reset to zero</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestReviewersAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestReviewersAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestReviewersAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote},System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestReviewersAsync (patchVotes, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchVotes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchVotes">IDs of the reviewers whose votes will be reset to zero</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestReviewersAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestReviewersAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestReviewersAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote},System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestReviewersAsync (patchVotes, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchVotes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchVotes">IDs of the reviewers whose votes will be reset to zero</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestReviewersAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestReviewersAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestReviewersAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote},System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestReviewersAsync (patchVotes, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchVotes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchVotes">IDs of the reviewers whose votes will be reset to zero</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestReviewersAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestReviewersAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestReviewersAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote},System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestReviewersAsync (patchVotes, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchVotes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchVotes">IDs of the reviewers whose votes will be reset to zero</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestReviewersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestReviewersAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestReviewersAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; patchVotes, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestReviewersAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote},System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestReviewersAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt; * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestReviewersAsync (patchVotes, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchVotes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchVotes">IDs of the reviewers whose votes will be reset to zero</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestStatusesAsync (patchDocument, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestStatusesAsync (patchDocument, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestStatusesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, Guid project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, valuetype System.Guid project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.Guid,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * Guid * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestStatusesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, Guid repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, valuetype System.Guid repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.Guid,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * Guid * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestStatusesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatePullRequestStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdatePullRequestStatusesAsync (Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, string repositoryId, int pullRequestId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdatePullRequestStatusesAsync(class Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument patchDocument, string project, string repositoryId, int32 pullRequestId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdatePullRequestStatusesAsync(Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument,System.String,System.String,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UpdatePullRequestStatusesAsync : Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument * string * string * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="gitHttpClientBase.UpdatePullRequestStatusesAsync (patchDocument, project, repositoryId, pullRequestId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patchDocument" Type="Microsoft.VisualStudio.Services.WebApi.Patch.Json.JsonPatchDocument" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patchDocument">Operations to apply to the pull request statuses in JSON Patch format.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request’s target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update pull request statuses collection. The only supported operation type is `remove`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, Guid repositoryId, string filter, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, valuetype System.Guid repositoryId, string filter, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate,System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&#xA;override this.UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;" Usage="gitHttpClientBase.UpdateRefAsync (newRefInfo, repositoryId, filter, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRefInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRefInfo">The ref update action (lock/unlock) to perform</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">The name of the branch to lock/unlock</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Lock or Unlock a branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, string repositoryId, string filter, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, string repositoryId, string filter, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate,System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&#xA;override this.UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;" Usage="gitHttpClientBase.UpdateRefAsync (newRefInfo, repositoryId, filter, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRefInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRefInfo">The ref update action (lock/unlock) to perform</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">The name of the branch to lock/unlock</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Lock or Unlock a branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, Guid project, Guid repositoryId, string filter, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, valuetype System.Guid project, valuetype System.Guid repositoryId, string filter, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate,System.Guid,System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * Guid * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&#xA;override this.UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * Guid * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;" Usage="gitHttpClientBase.UpdateRefAsync (newRefInfo, project, repositoryId, filter, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRefInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRefInfo">The ref update action (lock/unlock) to perform</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">The name of the branch to lock/unlock</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Lock or Unlock a branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, Guid project, string repositoryId, string filter, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, valuetype System.Guid project, string repositoryId, string filter, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate,System.Guid,System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * Guid * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&#xA;override this.UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * Guid * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;" Usage="gitHttpClientBase.UpdateRefAsync (newRefInfo, project, repositoryId, filter, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRefInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRefInfo">The ref update action (lock/unlock) to perform</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">The name of the branch to lock/unlock</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Lock or Unlock a branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, string project, Guid repositoryId, string filter, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, string project, valuetype System.Guid repositoryId, string filter, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate,System.String,System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * string * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&#xA;override this.UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * string * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;" Usage="gitHttpClientBase.UpdateRefAsync (newRefInfo, project, repositoryId, filter, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRefInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRefInfo">The ref update action (lock/unlock) to perform</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">The name of the branch to lock/unlock</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Lock or Unlock a branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, string project, string repositoryId, string filter, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt; UpdateRefAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate newRefInfo, string project, string repositoryId, string filter, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate,System.String,System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * string * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;&#xA;override this.UpdateRefAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate * string * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;" Usage="gitHttpClientBase.UpdateRefAsync (newRefInfo, project, repositoryId, filter, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRef&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRefInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRefInfo">The ref update action (lock/unlock) to perform</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="filter">The name of the branch to lock/unlock</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Lock or Unlock a branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, Guid repositoryId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, valuetype System.Guid repositoryId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate},System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;&#xA;override this.UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdateRefsAsync (refUpdates, repositoryId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt;" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="refUpdates">List of ref updates to attempt to perform</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creating, updating, or deleting refs(branches).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, string repositoryId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, string repositoryId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate},System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;&#xA;override this.UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdateRefsAsync (refUpdates, repositoryId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt;" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="refUpdates">List of ref updates to attempt to perform</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creating, updating, or deleting refs(branches).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, Guid project, Guid repositoryId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, valuetype System.Guid project, valuetype System.Guid repositoryId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate},System.Guid,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;&#xA;override this.UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * Guid * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdateRefsAsync (refUpdates, project, repositoryId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="refUpdates">List of ref updates to attempt to perform</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creating, updating, or deleting refs(branches).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, Guid project, string repositoryId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, valuetype System.Guid project, string repositoryId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate},System.Guid,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;&#xA;override this.UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * Guid * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdateRefsAsync (refUpdates, project, repositoryId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt;" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="refUpdates">List of ref updates to attempt to perform</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creating, updating, or deleting refs(branches).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, string project, Guid repositoryId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, string project, valuetype System.Guid repositoryId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate},System.String,System.Guid,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;&#xA;override this.UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * string * Guid * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdateRefsAsync (refUpdates, project, repositoryId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="refUpdates">List of ref updates to attempt to perform</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creating, updating, or deleting refs(branches).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRefsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, string project, string repositoryId, string projectId = null, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt; UpdateRefsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; refUpdates, string project, string repositoryId, string projectId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRefsAsync(System.Collections.Generic.IEnumerable{Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate},System.String,System.String,System.String,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;&#xA;override this.UpdateRefsAsync : seq&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt; * string * string * string * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;" Usage="gitHttpClientBase.UpdateRefsAsync (refUpdates, project, repositoryId, projectId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refUpdates" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate&gt;" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="projectId" Type="System.String" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="refUpdates">List of ref updates to attempt to perform</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="projectId">ID or name of the team project. Optional if specifying an ID for repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Creating, updating, or deleting refs(branches).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; UpdateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository newRepositoryInfo, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; UpdateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository newRepositoryInfo, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.UpdateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.UpdateRepositoryAsync (newRepositoryInfo, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRepositoryInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRepositoryInfo">Specify a new repo name or a new default branch of the repository</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Updates the Git repository with either a new repo name or a new default branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; UpdateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository newRepositoryInfo, Guid project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; UpdateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository newRepositoryInfo, valuetype System.Guid project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository,System.Guid,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.UpdateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * Guid * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.UpdateRepositoryAsync (newRepositoryInfo, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRepositoryInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRepositoryInfo">Specify a new repo name or a new default branch of the repository</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Updates the Git repository with either a new repo name or a new default branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; UpdateRepositoryAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository newRepositoryInfo, string project, Guid repositoryId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt; UpdateRepositoryAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository newRepositoryInfo, string project, valuetype System.Guid repositoryId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateRepositoryAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository,System.String,System.Guid,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;&#xA;override this.UpdateRepositoryAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository * string * Guid * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;" Usage="gitHttpClientBase.UpdateRepositoryAsync (newRepositoryInfo, project, repositoryId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRepositoryInfo" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRepositoryInfo">Specify a new repo name or a new default branch of the repository</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The name or ID of the repository.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Updates the Git repository with either a new repo name or a new default branch.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.UpdateThreadAsync (commentThread, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread content that should be updated.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.UpdateThreadAsync (commentThread, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread content that should be updated.</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, Guid project, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, valuetype System.Guid project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.Guid,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.UpdateThreadAsync (commentThread, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread content that should be updated.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, Guid project, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, valuetype System.Guid project, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.Guid,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * Guid * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.UpdateThreadAsync (commentThread, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.Guid" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread content that should be updated.</param>
        <param name="project">Project ID</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, Guid repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, valuetype System.Guid repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.String,System.Guid,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * Guid * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.UpdateThreadAsync (commentThread, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.Guid" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread content that should be updated.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync (Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, string repositoryId, int pullRequestId, int threadId, object userState = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt; UpdateThreadAsync(class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread commentThread, string project, string repositoryId, int32 pullRequestId, int32 threadId, object userState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase.UpdateThreadAsync(Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread,System.String,System.String,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;&#xA;override this.UpdateThreadAsync : Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread * string * string * int * int * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;" Usage="gitHttpClientBase.UpdateThreadAsync (commentThread, project, repositoryId, pullRequestId, threadId, userState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.SourceControl.WebApi</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commentThread" Type="Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread" />
        <Parameter Name="project" Type="System.String" />
        <Parameter Name="repositoryId" Type="System.String" />
        <Parameter Name="pullRequestId" Type="System.Int32" />
        <Parameter Name="threadId" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="commentThread">The thread content that should be updated.</param>
        <param name="project">Project ID or project name</param>
        <param name="repositoryId">The repository ID of the pull request's target branch.</param>
        <param name="pullRequestId">ID of the pull request.</param>
        <param name="threadId">ID of the thread to update.</param>
        <param name="userState"></param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            [Preview API] Update a thread in a pull request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>