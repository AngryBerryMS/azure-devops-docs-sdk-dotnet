<Type Name="ExtensionUtil" FullName="Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil">
  <TypeSignature Language="C#" Value="public static class ExtensionUtil" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExtensionUtil extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil" />
  <TypeSignature Language="VB.NET" Value="Public Class ExtensionUtil" />
  <TypeSignature Language="F#" Value="type ExtensionUtil = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi</AssemblyName>
    <AssemblyVersion>16.0.0.0</AssemblyVersion>
    <AssemblyVersion>17.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary />
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FullyQualifyContributionIds">
      <MemberSignature Language="C#" Value="public static void FullyQualifyContributionIds (System.Collections.Generic.List&lt;string&gt; list, string extensionIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FullyQualifyContributionIds(class System.Collections.Generic.List`1&lt;string&gt; list, string extensionIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.FullyQualifyContributionIds(System.Collections.Generic.List{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FullyQualifyContributionIds (list As List(Of String), extensionIdentifier As String)" />
      <MemberSignature Language="F#" Value="static member FullyQualifyContributionIds : System.Collections.Generic.List&lt;string&gt; * string -&gt; unit" Usage="Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.FullyQualifyContributionIds (list, extensionIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
        <AssemblyVersion>17.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;System.String&gt;" />
        <Parameter Name="extensionIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="list" />
        <param name="extensionIdentifier" />
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;string,object&gt; GetExtensionProperties (Microsoft.VisualStudio.Services.Gallery.WebApi.PublishedExtensionFlags extensionFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;string, object&gt; GetExtensionProperties(valuetype Microsoft.VisualStudio.Services.Gallery.WebApi.PublishedExtensionFlags extensionFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.GetExtensionProperties(Microsoft.VisualStudio.Services.Gallery.WebApi.PublishedExtensionFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtensionProperties (extensionFlags As PublishedExtensionFlags) As Dictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="static member GetExtensionProperties : Microsoft.VisualStudio.Services.Gallery.WebApi.PublishedExtensionFlags -&gt; System.Collections.Generic.Dictionary&lt;string, obj&gt;" Usage="Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.GetExtensionProperties extensionFlags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
        <AssemblyVersion>17.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionFlags" Type="Microsoft.VisualStudio.Services.Gallery.WebApi.PublishedExtensionFlags" />
      </Parameters>
      <Docs>
        <param name="extensionFlags" />
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFullyQualifiedReference">
      <MemberSignature Language="C#" Value="public static string GetFullyQualifiedReference (string extensionIdentifier, string contributionId, bool supportsExternalReference);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullyQualifiedReference(string extensionIdentifier, string contributionId, bool supportsExternalReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.GetFullyQualifiedReference(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullyQualifiedReference (extensionIdentifier As String, contributionId As String, supportsExternalReference As Boolean) As String" />
      <MemberSignature Language="F#" Value="static member GetFullyQualifiedReference : string * string * bool -&gt; string" Usage="Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.GetFullyQualifiedReference (extensionIdentifier, contributionId, supportsExternalReference)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
        <AssemblyVersion>17.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionIdentifier" Type="System.String" />
        <Parameter Name="contributionId" Type="System.String" />
        <Parameter Name="supportsExternalReference" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extensionIdentifier" />
        <param name="contributionId" />
        <param name="supportsExternalReference" />
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadManifest">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest LoadManifest (string publisherName, string extensionName, string version, System.IO.Stream manifestStream, System.Collections.Generic.IDictionary&lt;string,object&gt; extraProperties = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest LoadManifest(string publisherName, string extensionName, string version, class System.IO.Stream manifestStream, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; extraProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.LoadManifest(System.String,System.String,System.String,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadManifest (publisherName As String, extensionName As String, version As String, manifestStream As Stream, Optional extraProperties As IDictionary(Of String, Object) = Nothing) As ExtensionManifest" />
      <MemberSignature Language="F#" Value="static member LoadManifest : string * string * string * System.IO.Stream * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest" Usage="Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.LoadManifest (publisherName, extensionName, version, manifestStream, extraProperties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publisherName" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="extensionName" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="version" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="manifestStream" Type="System.IO.Stream" Index="3" FrameworkAlternate="azure-devops-dotnet" />
        <Parameter Name="extraProperties" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet" />
      </Parameters>
      <Docs>
        <param name="publisherName">
        </param>
        <param name="extensionName">
        </param>
        <param name="version">
        </param>
        <param name="manifestStream">
        </param>
        <param name="extraProperties">
        </param>
        <summary>
            Given a serialized manifest stream this method will deserialize the manifest
            and fill in all the run time properties of the contributions
            
            Contributions that are deserialized from an ExtensionManfiest don't have all
            their properties setup and need to be fixed before the manifest can be used.
            
            This includes things like:
                Ensureing Id's are fully qualified
                Filtering out supplied resrticted properties from each contribution
                Adding any extra properties to each contribution
                etc.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadManifest">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest LoadManifest (string publisherName, string extensionName, string version, System.IO.Stream manifestStream, System.Collections.Generic.IDictionary&lt;string,object&gt; extraProperties = default, bool addLicensingConstraints = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest LoadManifest(string publisherName, string extensionName, string version, class System.IO.Stream manifestStream, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; extraProperties, bool addLicensingConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.LoadManifest(System.String,System.String,System.String,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadManifest (publisherName As String, extensionName As String, version As String, manifestStream As Stream, Optional extraProperties As IDictionary(Of String, Object) = Nothing, Optional addLicensingConstraints As Boolean = false) As ExtensionManifest" />
      <MemberSignature Language="F#" Value="static member LoadManifest : string * string * string * System.IO.Stream * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool -&gt; Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest" Usage="Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionUtil.LoadManifest (publisherName, extensionName, version, manifestStream, extraProperties, addLicensingConstraints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi</AssemblyName>
        <AssemblyVersion>17.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualStudio.Services.ExtensionManagement.WebApi.ExtensionManifest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publisherName" Type="System.String" Index="0" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="extensionName" Type="System.String" Index="1" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="version" Type="System.String" Index="2" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="manifestStream" Type="System.IO.Stream" Index="3" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="extraProperties" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" Index="4" FrameworkAlternate="azure-devops-dotnet-preview" />
        <Parameter Name="addLicensingConstraints" Type="System.Boolean" Index="5" FrameworkAlternate="azure-devops-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="addLicensingConstraints">To be added.</param>
        <param name="publisherName" />
        <param name="extensionName" />
        <param name="version" />
        <param name="manifestStream" />
        <param name="extraProperties" />
        <summary>
            Given a serialized manifest stream this method will deserialize the manifest
            and fill in all the run time properties of the contributions
            
            Contributions that are deserialized from an ExtensionManfiest don't have all
            their properties setup and need to be fixed before the manifest can be used.
            
            This includes things like:
                Ensureing Id's are fully qualified
                Filtering out supplied resrticted properties from each contribution
                Adding any extra properties to each contribution
                etc.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
