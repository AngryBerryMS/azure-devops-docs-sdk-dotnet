<Type Name="ISecretStore" FullName="Microsoft.TeamFoundation.DistributedTask.Pipelines.ISecretStore">
  <TypeSignature Language="C#" Value="public interface ISecretStore" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISecretStore" />
  <TypeSignature Language="DocId" Value="T:Microsoft.TeamFoundation.DistributedTask.Pipelines.ISecretStore" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISecretStore" />
  <TypeSignature Language="F#" Value="type ISecretStore = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.TeamFoundation.DistributedTask.WebApi</AssemblyName>
    <AssemblyVersion>16.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="azure-devops-dotnet">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides a mechanism for a hosting environment to provide access to external secret providers.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetSteps">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.DistributedTask.Pipelines.TaskStep&gt; GetSteps (Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference group, System.Collections.Generic.IEnumerable&lt;string&gt; keys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.TeamFoundation.DistributedTask.Pipelines.TaskStep&gt; GetSteps(class Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference group, class System.Collections.Generic.IEnumerable`1&lt;string&gt; keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.DistributedTask.Pipelines.ISecretStore.GetSteps(Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSteps (group As VariableGroupReference, keys As IEnumerable(Of String)) As IEnumerable(Of TaskStep)" />
      <MemberSignature Language="F#" Value="abstract member GetSteps : Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference * seq&lt;string&gt; -&gt; seq&lt;Microsoft.TeamFoundation.DistributedTask.Pipelines.TaskStep&gt;" Usage="iSecretStore.GetSteps (group, keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.DistributedTask.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.TeamFoundation.DistributedTask.Pipelines.TaskStep&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="group">The group from which secrets should be retrieved</param>
        <param name="keys">A list of keys which should be retrieved from the secret provider</param>
        <summary>
            Returns the list of steps which should be added to agent jobs in order to inject secrets into the 
            environment.
            </summary>
        <returns>A list of task steps which should be added to jobs in order to setup the environment</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetValues (Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference group, Microsoft.TeamFoundation.DistributedTask.WebApi.ServiceEndpoint endpoint, System.Collections.Generic.IEnumerable&lt;string&gt; keys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetValues(class Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference group, class Microsoft.TeamFoundation.DistributedTask.WebApi.ServiceEndpoint endpoint, class System.Collections.Generic.IEnumerable`1&lt;string&gt; keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.DistributedTask.Pipelines.ISecretStore.GetValues(Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference,Microsoft.TeamFoundation.DistributedTask.WebApi.ServiceEndpoint,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValues (group As VariableGroupReference, endpoint As ServiceEndpoint, keys As IEnumerable(Of String)) As IDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="abstract member GetValues : Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference * Microsoft.TeamFoundation.DistributedTask.WebApi.ServiceEndpoint * seq&lt;string&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iSecretStore.GetValues (group, endpoint, keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.DistributedTask.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference" />
        <Parameter Name="endpoint" Type="Microsoft.TeamFoundation.DistributedTask.WebApi.ServiceEndpoint" />
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="group">The group from which secrets should be retrieved</param>
        <param name="endpoint">The service endpoint which should be used to connect to the secret provider</param>
        <param name="keys">The keys which should be retrieved from the provider</param>
        <summary>
            Returns the resolved values for secrets requested in <paramref name="keys" />.
            </summary>
        <returns>A set of variables with secret values populated from the secret provider</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public bool IsSupported (string groupType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupported(string groupType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.DistributedTask.Pipelines.ISecretStore.IsSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupported (groupType As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsSupported : string -&gt; bool" Usage="iSecretStore.IsSupported groupType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.DistributedTask.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupType">Type type of variable group</param>
        <summary>
            Gets a value indicating whether or not a provider exists which can handle the specified type.
            </summary>
        <returns>True if an <c>ISecretsProvider</c> instance exists to handle the specified type; otherwise, false</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldGetValues">
      <MemberSignature Language="C#" Value="public bool ShouldGetValues (Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference group, Microsoft.TeamFoundation.DistributedTask.Pipelines.PhaseTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldGetValues(class Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference group, class Microsoft.TeamFoundation.DistributedTask.Pipelines.PhaseTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamFoundation.DistributedTask.Pipelines.ISecretStore.ShouldGetValues(Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference,Microsoft.TeamFoundation.DistributedTask.Pipelines.PhaseTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldGetValues (group As VariableGroupReference, target As PhaseTarget) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldGetValues : Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference * Microsoft.TeamFoundation.DistributedTask.Pipelines.PhaseTarget -&gt; bool" Usage="iSecretStore.ShouldGetValues (group, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamFoundation.DistributedTask.WebApi</AssemblyName>
        <AssemblyVersion>16.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Microsoft.TeamFoundation.DistributedTask.Pipelines.VariableGroupReference" />
        <Parameter Name="target" Type="Microsoft.TeamFoundation.DistributedTask.Pipelines.PhaseTarget" />
      </Parameters>
      <Docs>
        <param name="group">The group from which secrets should be retrieved</param>
        <param name="target">The target of the phase</param>
        <summary>
            Returns a value indicating whether or not values should be retrieved directly from the secret
            store.
            </summary>
        <returns>True if the values should be retrieved; otherwise, false</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>